digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__blender_blend {
		label="BlenderBlend";
		graph[style=dotted];

		blender_blend__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="hdr_pos">0</TD><TD PORT="hdr_size">12</TD><TD>Header</TD><TD PORT="hdr_type">hdr</TD></TR>
			<TR><TD PORT="blocks_pos">12</TD><TD PORT="blocks_size">...</TD><TD>FileBlock</TD><TD PORT="blocks_type">blocks</TD></TR>
			<TR><TD COLSPAN="4" PORT="blocks__repeat">repeat to end of stream</TD></TR>
		</TABLE>>];
		subgraph cluster__header {
			label="BlenderBlend::Header";
			graph[style=dotted];

			header__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="magic_pos">0</TD><TD PORT="magic_size">7</TD><TD>42 4C 45 4E 44 45 52</TD><TD PORT="magic_type">magic</TD></TR>
				<TR><TD PORT="ptr_size_id_pos">7</TD><TD PORT="ptr_size_id_size">1</TD><TD>u1→PtrSize</TD><TD PORT="ptr_size_id_type">ptr_size_id</TD></TR>
				<TR><TD PORT="endian_pos">8</TD><TD PORT="endian_size">1</TD><TD>u1→Endian</TD><TD PORT="endian_type">endian</TD></TR>
				<TR><TD PORT="version_pos">9</TD><TD PORT="version_size">3</TD><TD>str(ASCII)</TD><TD PORT="version_type">version</TD></TR>
			</TABLE>>];
			header__inst__psize [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>psize</TD><TD>(ptr_size_id == :ptr_size_bits_64 ? 8 : 4)</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__file_block {
			label="BlenderBlend::FileBlock";
			graph[style=dotted];

			file_block__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="code_pos">0</TD><TD PORT="code_size">4</TD><TD>str(ASCII)</TD><TD PORT="code_type">code</TD></TR>
				<TR><TD PORT="size_pos">4</TD><TD PORT="size_size">4</TD><TD>u4le</TD><TD PORT="size_type">size</TD></TR>
				<TR><TD PORT="mem_addr_pos">8</TD><TD PORT="mem_addr_size">_root.hdr.psize</TD><TD></TD><TD PORT="mem_addr_type">mem_addr</TD></TR>
				<TR><TD PORT="sdna_index_pos">...</TD><TD PORT="sdna_index_size">4</TD><TD>u4le</TD><TD PORT="sdna_index_type">sdna_index</TD></TR>
				<TR><TD PORT="count_pos">...</TD><TD PORT="count_size">4</TD><TD>u4le</TD><TD PORT="count_type">count</TD></TR>
				<TR><TD PORT="body_pos">...</TD><TD PORT="body_size">size</TD><TD></TD><TD PORT="body_type">body</TD></TR>
			</TABLE>>];
		}
	}
	blender_blend__seq:hdr_type -> header__seq [style=bold];
	blender_blend__seq:blocks_type -> file_block__seq [style=bold];
	header__seq:ptr_size_id_type -> header__inst__psize [color="#404040"];
	header__inst__psize:psize_type -> file_block__seq:mem_addr_size [color="#404040"];
	file_block__seq:size_type -> file_block__seq:body_size [color="#404040"];
}
