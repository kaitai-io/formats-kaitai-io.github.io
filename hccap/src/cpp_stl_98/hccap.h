#ifndef HCCAP_H_
#define HCCAP_H_

// This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild

#include "kaitai/kaitaistruct.h"
#include <stdint.h>
#include <vector>

#if KAITAI_STRUCT_VERSION < 9000L
#error "Incompatible Kaitai Struct C++/STL API: version 0.9 or later is required"
#endif

/**
 * Native format of Hashcat password "recovery" utility.
 * 
 * A sample of file for testing can be downloaded from https://web.archive.org/web/20150220013635if_/http://hashcat.net:80/misc/example_hashes/hashcat.hccap
 * \sa https://hashcat.net/wiki/doku.php?id=hccap Source
 */

class hccap_t : public kaitai::kstruct {

public:
    class hccap_record_t;
    class eapol_dummy_t;

    hccap_t(kaitai::kstream* p__io, kaitai::kstruct* p__parent = 0, hccap_t* p__root = 0);

private:
    void _read();
    void _clean_up();

public:
    ~hccap_t();

    class hccap_record_t : public kaitai::kstruct {

    public:

        hccap_record_t(kaitai::kstream* p__io, hccap_t* p__parent = 0, hccap_t* p__root = 0);

    private:
        void _read();
        void _clean_up();

    public:
        ~hccap_record_t();

    private:
        bool f_eapol;
        std::string m_eapol;

    public:
        std::string eapol();

    private:
        std::string m_essid;
        std::string m_mac_ap;
        std::string m_mac_station;
        std::string m_nonce_station;
        std::string m_nonce_ap;
        eapol_dummy_t* m_eapol_buffer;
        uint32_t m_len_eapol;
        uint32_t m_keyver;
        std::string m_keymic;
        hccap_t* m__root;
        hccap_t* m__parent;
        std::string m__raw_eapol_buffer;
        kaitai::kstream* m__io__raw_eapol_buffer;

    public:
        std::string essid() const { return m_essid; }

        /**
         * The BSSID (MAC address) of the access point
         */
        std::string mac_ap() const { return m_mac_ap; }

        /**
         * The MAC address of a client connecting to the access point
         */
        std::string mac_station() const { return m_mac_station; }

        /**
         * Nonce (random salt) generated by the client connecting to the access point.
         */
        std::string nonce_station() const { return m_nonce_station; }

        /**
         * Nonce (random salt) generated by the access point.
         */
        std::string nonce_ap() const { return m_nonce_ap; }

        /**
         * Buffer for EAPOL data, only first `len_eapol` bytes are used
         */
        eapol_dummy_t* eapol_buffer() const { return m_eapol_buffer; }

        /**
         * Size of EAPOL data
         */
        uint32_t len_eapol() const { return m_len_eapol; }

        /**
         * The flag used to distinguish WPA from WPA2 ciphers. Value of
         * 1 means WPA, other - WPA2.
         */
        uint32_t keyver() const { return m_keyver; }

        /**
         * The final hash value. MD5 for WPA and SHA-1 for WPA2
         * (truncated to 128 bit).
         */
        std::string keymic() const { return m_keymic; }
        hccap_t* _root() const { return m__root; }
        hccap_t* _parent() const { return m__parent; }
        std::string _raw_eapol_buffer() const { return m__raw_eapol_buffer; }
        kaitai::kstream* _io__raw_eapol_buffer() const { return m__io__raw_eapol_buffer; }
    };

    class eapol_dummy_t : public kaitai::kstruct {

    public:

        eapol_dummy_t(kaitai::kstream* p__io, hccap_t::hccap_record_t* p__parent = 0, hccap_t* p__root = 0);

    private:
        void _read();
        void _clean_up();

    public:
        ~eapol_dummy_t();

    private:
        hccap_t* m__root;
        hccap_t::hccap_record_t* m__parent;

    public:
        hccap_t* _root() const { return m__root; }
        hccap_t::hccap_record_t* _parent() const { return m__parent; }
    };

private:
    std::vector<hccap_record_t*>* m_records;
    hccap_t* m__root;
    kaitai::kstruct* m__parent;

public:
    std::vector<hccap_record_t*>* records() const { return m_records; }
    hccap_t* _root() const { return m__root; }
    kaitai::kstruct* _parent() const { return m__parent; }
};

#endif  // HCCAP_H_
