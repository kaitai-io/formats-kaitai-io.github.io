// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
	"golang.org/x/text/encoding/unicode"
)


/**
 * A TrueType font file contains data, in table format, that comprises
 * an outline font.
 * @see <a href="https://web.archive.org/web/20160410081432/https://www.microsoft.com/typography/tt/ttf_spec/ttch02.doc">Source</a>
 */
type Ttf struct {
	OffsetTable *Ttf_OffsetTable
	DirectoryTable []*Ttf_DirTableEntry
	_io *kaitai.Stream
	_root *Ttf
	_parent kaitai.Struct
}
func NewTtf() *Ttf {
	return &Ttf{
	}
}

func (this Ttf) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf) Read(io *kaitai.Stream, parent kaitai.Struct, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewTtf_OffsetTable()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.OffsetTable = tmp1
	for i := 0; i < int(this.OffsetTable.NumTables); i++ {
		_ = i
		tmp2 := NewTtf_DirTableEntry()
		err = tmp2.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.DirectoryTable = append(this.DirectoryTable, tmp2)
	}
	return err
}

/**
 * cmap - Character To Glyph Index Mapping Table This table defines the mapping of character codes to the glyph index values used in the font.
 */
type Ttf_Cmap struct {
	VersionNumber uint16
	NumberOfEncodingTables uint16
	Tables []*Ttf_Cmap_SubtableHeader
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Cmap() *Ttf_Cmap {
	return &Ttf_Cmap{
	}
}

func (this Ttf_Cmap) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cmap) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp3, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.VersionNumber = uint16(tmp3)
	tmp4, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.NumberOfEncodingTables = uint16(tmp4)
	for i := 0; i < int(this.NumberOfEncodingTables); i++ {
		_ = i
		tmp5 := NewTtf_Cmap_SubtableHeader()
		err = tmp5.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Tables = append(this.Tables, tmp5)
	}
	return err
}

type Ttf_Cmap_Subtable_SubtableFormat int
const (
	Ttf_Cmap_Subtable_SubtableFormat__ByteEncodingTable Ttf_Cmap_Subtable_SubtableFormat = 0
	Ttf_Cmap_Subtable_SubtableFormat__HighByteMappingThroughTable Ttf_Cmap_Subtable_SubtableFormat = 2
	Ttf_Cmap_Subtable_SubtableFormat__SegmentMappingToDeltaValues Ttf_Cmap_Subtable_SubtableFormat = 4
	Ttf_Cmap_Subtable_SubtableFormat__TrimmedTableMapping Ttf_Cmap_Subtable_SubtableFormat = 6
)
var values_Ttf_Cmap_Subtable_SubtableFormat = map[Ttf_Cmap_Subtable_SubtableFormat]struct{}{0: {}, 2: {}, 4: {}, 6: {}}
func (v Ttf_Cmap_Subtable_SubtableFormat) isDefined() bool {
	_, ok := values_Ttf_Cmap_Subtable_SubtableFormat[v]
	return ok
}
type Ttf_Cmap_Subtable struct {
	Format Ttf_Cmap_Subtable_SubtableFormat
	Length uint16
	Version uint16
	Value interface{}
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Cmap_SubtableHeader
	_raw_Value []byte
}
func NewTtf_Cmap_Subtable() *Ttf_Cmap_Subtable {
	return &Ttf_Cmap_Subtable{
	}
}

func (this Ttf_Cmap_Subtable) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cmap_Subtable) Read(io *kaitai.Stream, parent *Ttf_Cmap_SubtableHeader, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Format = Ttf_Cmap_Subtable_SubtableFormat(tmp6)
	tmp7, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Length = uint16(tmp7)
	tmp8, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Version = uint16(tmp8)
	switch (this.Format) {
	case Ttf_Cmap_Subtable_SubtableFormat__ByteEncodingTable:
		tmp9, err := this._io.ReadBytes(int(this.Length - 6))
		if err != nil {
			return err
		}
		tmp9 = tmp9
		this._raw_Value = tmp9
		_io__raw_Value := kaitai.NewStream(bytes.NewReader(this._raw_Value))
		tmp10 := NewTtf_Cmap_Subtable_ByteEncodingTable()
		err = tmp10.Read(_io__raw_Value, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp10
	case Ttf_Cmap_Subtable_SubtableFormat__HighByteMappingThroughTable:
		tmp11, err := this._io.ReadBytes(int(this.Length - 6))
		if err != nil {
			return err
		}
		tmp11 = tmp11
		this._raw_Value = tmp11
		_io__raw_Value := kaitai.NewStream(bytes.NewReader(this._raw_Value))
		tmp12 := NewTtf_Cmap_Subtable_HighByteMappingThroughTable()
		err = tmp12.Read(_io__raw_Value, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp12
	case Ttf_Cmap_Subtable_SubtableFormat__SegmentMappingToDeltaValues:
		tmp13, err := this._io.ReadBytes(int(this.Length - 6))
		if err != nil {
			return err
		}
		tmp13 = tmp13
		this._raw_Value = tmp13
		_io__raw_Value := kaitai.NewStream(bytes.NewReader(this._raw_Value))
		tmp14 := NewTtf_Cmap_Subtable_SegmentMappingToDeltaValues()
		err = tmp14.Read(_io__raw_Value, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp14
	case Ttf_Cmap_Subtable_SubtableFormat__TrimmedTableMapping:
		tmp15, err := this._io.ReadBytes(int(this.Length - 6))
		if err != nil {
			return err
		}
		tmp15 = tmp15
		this._raw_Value = tmp15
		_io__raw_Value := kaitai.NewStream(bytes.NewReader(this._raw_Value))
		tmp16 := NewTtf_Cmap_Subtable_TrimmedTableMapping()
		err = tmp16.Read(_io__raw_Value, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp16
	default:
		tmp17, err := this._io.ReadBytes(int(this.Length - 6))
		if err != nil {
			return err
		}
		tmp17 = tmp17
		this._raw_Value = tmp17
	}
	return err
}
type Ttf_Cmap_Subtable_ByteEncodingTable struct {
	GlyphIdArray []byte
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Cmap_Subtable
}
func NewTtf_Cmap_Subtable_ByteEncodingTable() *Ttf_Cmap_Subtable_ByteEncodingTable {
	return &Ttf_Cmap_Subtable_ByteEncodingTable{
	}
}

func (this Ttf_Cmap_Subtable_ByteEncodingTable) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cmap_Subtable_ByteEncodingTable) Read(io *kaitai.Stream, parent *Ttf_Cmap_Subtable, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp18, err := this._io.ReadBytes(int(256))
	if err != nil {
		return err
	}
	tmp18 = tmp18
	this.GlyphIdArray = tmp18
	return err
}
type Ttf_Cmap_Subtable_HighByteMappingThroughTable struct {
	SubHeaderKeys []uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Cmap_Subtable
}
func NewTtf_Cmap_Subtable_HighByteMappingThroughTable() *Ttf_Cmap_Subtable_HighByteMappingThroughTable {
	return &Ttf_Cmap_Subtable_HighByteMappingThroughTable{
	}
}

func (this Ttf_Cmap_Subtable_HighByteMappingThroughTable) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cmap_Subtable_HighByteMappingThroughTable) Read(io *kaitai.Stream, parent *Ttf_Cmap_Subtable, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(256); i++ {
		_ = i
		tmp19, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.SubHeaderKeys = append(this.SubHeaderKeys, tmp19)
	}
	return err
}
type Ttf_Cmap_Subtable_SegmentMappingToDeltaValues struct {
	SegCountX2 uint16
	SearchRange uint16
	EntrySelector uint16
	RangeShift uint16
	EndCount []uint16
	ReservedPad uint16
	StartCount []uint16
	IdDelta []uint16
	IdRangeOffset []uint16
	GlyphIdArray []uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Cmap_Subtable
	_f_segCount bool
	segCount int
}
func NewTtf_Cmap_Subtable_SegmentMappingToDeltaValues() *Ttf_Cmap_Subtable_SegmentMappingToDeltaValues {
	return &Ttf_Cmap_Subtable_SegmentMappingToDeltaValues{
	}
}

func (this Ttf_Cmap_Subtable_SegmentMappingToDeltaValues) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cmap_Subtable_SegmentMappingToDeltaValues) Read(io *kaitai.Stream, parent *Ttf_Cmap_Subtable, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp20, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.SegCountX2 = uint16(tmp20)
	tmp21, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.SearchRange = uint16(tmp21)
	tmp22, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.EntrySelector = uint16(tmp22)
	tmp23, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.RangeShift = uint16(tmp23)
	tmp24, err := this.SegCount()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp24); i++ {
		_ = i
		tmp25, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.EndCount = append(this.EndCount, tmp25)
	}
	tmp26, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.ReservedPad = uint16(tmp26)
	tmp27, err := this.SegCount()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp27); i++ {
		_ = i
		tmp28, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.StartCount = append(this.StartCount, tmp28)
	}
	tmp29, err := this.SegCount()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp29); i++ {
		_ = i
		tmp30, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.IdDelta = append(this.IdDelta, tmp30)
	}
	tmp31, err := this.SegCount()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp31); i++ {
		_ = i
		tmp32, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.IdRangeOffset = append(this.IdRangeOffset, tmp32)
	}
	for i := 0;; i++ {
		tmp33, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp33 {
			break
		}
		tmp34, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.GlyphIdArray = append(this.GlyphIdArray, tmp34)
	}
	return err
}
func (this *Ttf_Cmap_Subtable_SegmentMappingToDeltaValues) SegCount() (v int, err error) {
	if (this._f_segCount) {
		return this.segCount, nil
	}
	this._f_segCount = true
	this.segCount = int(this.SegCountX2 / 2)
	return this.segCount, nil
}
type Ttf_Cmap_Subtable_TrimmedTableMapping struct {
	FirstCode uint16
	EntryCount uint16
	GlyphIdArray []uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Cmap_Subtable
}
func NewTtf_Cmap_Subtable_TrimmedTableMapping() *Ttf_Cmap_Subtable_TrimmedTableMapping {
	return &Ttf_Cmap_Subtable_TrimmedTableMapping{
	}
}

func (this Ttf_Cmap_Subtable_TrimmedTableMapping) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cmap_Subtable_TrimmedTableMapping) Read(io *kaitai.Stream, parent *Ttf_Cmap_Subtable, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp35, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.FirstCode = uint16(tmp35)
	tmp36, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.EntryCount = uint16(tmp36)
	for i := 0; i < int(this.EntryCount); i++ {
		_ = i
		tmp37, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.GlyphIdArray = append(this.GlyphIdArray, tmp37)
	}
	return err
}
type Ttf_Cmap_SubtableHeader struct {
	PlatformId uint16
	EncodingId uint16
	SubtableOffset uint32
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Cmap
	_f_table bool
	table *Ttf_Cmap_Subtable
}
func NewTtf_Cmap_SubtableHeader() *Ttf_Cmap_SubtableHeader {
	return &Ttf_Cmap_SubtableHeader{
	}
}

func (this Ttf_Cmap_SubtableHeader) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cmap_SubtableHeader) Read(io *kaitai.Stream, parent *Ttf_Cmap, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp38, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.PlatformId = uint16(tmp38)
	tmp39, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.EncodingId = uint16(tmp39)
	tmp40, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.SubtableOffset = uint32(tmp40)
	return err
}
func (this *Ttf_Cmap_SubtableHeader) Table() (v *Ttf_Cmap_Subtable, err error) {
	if (this._f_table) {
		return this.table, nil
	}
	this._f_table = true
	thisIo := this._parent._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return nil, err
	}
	_, err = thisIo.Seek(int64(this.SubtableOffset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp41 := NewTtf_Cmap_Subtable()
	err = tmp41.Read(thisIo, this, this._root)
	if err != nil {
		return nil, err
	}
	this.table = tmp41
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.table, nil
}

/**
 * cvt  - Control Value Table This table contains a list of values that can be referenced by instructions. They can be used, among other things, to control characteristics for different glyphs.
 */
type Ttf_Cvt struct {
	Fwords []int16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Cvt() *Ttf_Cvt {
	return &Ttf_Cvt{
	}
}

func (this Ttf_Cvt) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Cvt) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0;; i++ {
		tmp42, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp42 {
			break
		}
		tmp43, err := this._io.ReadS2be()
		if err != nil {
			return err
		}
		this.Fwords = append(this.Fwords, tmp43)
	}
	return err
}
type Ttf_DirTableEntry struct {
	Tag string
	Checksum uint32
	Offset uint32
	Length uint32
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf
	_raw_value []byte
	_f_value bool
	value interface{}
}
func NewTtf_DirTableEntry() *Ttf_DirTableEntry {
	return &Ttf_DirTableEntry{
	}
}

func (this Ttf_DirTableEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_DirTableEntry) Read(io *kaitai.Stream, parent *Ttf, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp44, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp44 = tmp44
	this.Tag = string(tmp44)
	tmp45, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Checksum = uint32(tmp45)
	tmp46, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Offset = uint32(tmp46)
	tmp47, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Length = uint32(tmp47)
	return err
}
func (this *Ttf_DirTableEntry) Value() (v interface{}, err error) {
	if (this._f_value) {
		return this.value, nil
	}
	this._f_value = true
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return nil, err
	}
	_, err = thisIo.Seek(int64(this.Offset), io.SeekStart)
	if err != nil {
		return nil, err
	}
	switch (this.Tag) {
	case "OS/2":
		tmp48, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp48 = tmp48
		this._raw_value = tmp48
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp49 := NewTtf_Os2()
		err = tmp49.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp49
	case "cmap":
		tmp50, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp50 = tmp50
		this._raw_value = tmp50
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp51 := NewTtf_Cmap()
		err = tmp51.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp51
	case "cvt ":
		tmp52, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp52 = tmp52
		this._raw_value = tmp52
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp53 := NewTtf_Cvt()
		err = tmp53.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp53
	case "fpgm":
		tmp54, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp54 = tmp54
		this._raw_value = tmp54
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp55 := NewTtf_Fpgm()
		err = tmp55.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp55
	case "glyf":
		tmp56, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp56 = tmp56
		this._raw_value = tmp56
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp57 := NewTtf_Glyf()
		err = tmp57.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp57
	case "head":
		tmp58, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp58 = tmp58
		this._raw_value = tmp58
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp59 := NewTtf_Head()
		err = tmp59.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp59
	case "hhea":
		tmp60, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp60 = tmp60
		this._raw_value = tmp60
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp61 := NewTtf_Hhea()
		err = tmp61.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp61
	case "kern":
		tmp62, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp62 = tmp62
		this._raw_value = tmp62
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp63 := NewTtf_Kern()
		err = tmp63.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp63
	case "maxp":
		tmp64, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp64 = tmp64
		this._raw_value = tmp64
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp65 := NewTtf_Maxp()
		err = tmp65.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp65
	case "name":
		tmp66, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp66 = tmp66
		this._raw_value = tmp66
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp67 := NewTtf_Name()
		err = tmp67.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp67
	case "post":
		tmp68, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp68 = tmp68
		this._raw_value = tmp68
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp69 := NewTtf_Post()
		err = tmp69.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp69
	case "prep":
		tmp70, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp70 = tmp70
		this._raw_value = tmp70
		_io__raw_value := kaitai.NewStream(bytes.NewReader(this._raw_value))
		tmp71 := NewTtf_Prep()
		err = tmp71.Read(_io__raw_value, this, this._root)
		if err != nil {
			return nil, err
		}
		this.value = tmp71
	default:
		tmp72, err := thisIo.ReadBytes(int(this.Length))
		if err != nil {
			return nil, err
		}
		tmp72 = tmp72
		this._raw_value = tmp72
	}
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.value, nil
}
type Ttf_Fixed struct {
	Major uint16
	Minor uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent kaitai.Struct
}
func NewTtf_Fixed() *Ttf_Fixed {
	return &Ttf_Fixed{
	}
}

func (this Ttf_Fixed) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Fixed) Read(io *kaitai.Stream, parent kaitai.Struct, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp73, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Major = uint16(tmp73)
	tmp74, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Minor = uint16(tmp74)
	return err
}
type Ttf_Fpgm struct {
	Instructions []byte
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Fpgm() *Ttf_Fpgm {
	return &Ttf_Fpgm{
	}
}

func (this Ttf_Fpgm) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Fpgm) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp75, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp75 = tmp75
	this.Instructions = tmp75
	return err
}
type Ttf_Glyf struct {
	NumberOfContours int16
	XMin int16
	YMin int16
	XMax int16
	YMax int16
	Value *Ttf_Glyf_SimpleGlyph
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Glyf() *Ttf_Glyf {
	return &Ttf_Glyf{
	}
}

func (this Ttf_Glyf) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Glyf) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp76, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.NumberOfContours = int16(tmp76)
	tmp77, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.XMin = int16(tmp77)
	tmp78, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YMin = int16(tmp78)
	tmp79, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.XMax = int16(tmp79)
	tmp80, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YMax = int16(tmp80)
	if (this.NumberOfContours > 0) {
		tmp81 := NewTtf_Glyf_SimpleGlyph()
		err = tmp81.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp81
	}
	return err
}
type Ttf_Glyf_SimpleGlyph struct {
	EndPtsOfContours []uint16
	InstructionLength uint16
	Instructions []byte
	Flags []*Ttf_Glyf_SimpleGlyph_Flag
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Glyf
	_f_pointCount bool
	pointCount int
}
func NewTtf_Glyf_SimpleGlyph() *Ttf_Glyf_SimpleGlyph {
	return &Ttf_Glyf_SimpleGlyph{
	}
}

func (this Ttf_Glyf_SimpleGlyph) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Glyf_SimpleGlyph) Read(io *kaitai.Stream, parent *Ttf_Glyf, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(this._parent.NumberOfContours); i++ {
		_ = i
		tmp82, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.EndPtsOfContours = append(this.EndPtsOfContours, tmp82)
	}
	tmp83, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.InstructionLength = uint16(tmp83)
	tmp84, err := this._io.ReadBytes(int(this.InstructionLength))
	if err != nil {
		return err
	}
	tmp84 = tmp84
	this.Instructions = tmp84
	tmp85, err := this.PointCount()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp85); i++ {
		_ = i
		tmp86 := NewTtf_Glyf_SimpleGlyph_Flag()
		err = tmp86.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Flags = append(this.Flags, tmp86)
	}
	return err
}
func (this *Ttf_Glyf_SimpleGlyph) PointCount() (v int, err error) {
	if (this._f_pointCount) {
		return this.pointCount, nil
	}
	this._f_pointCount = true
	tmp87 := this.EndPtsOfContours[0]
	for _, tmp88 := range this.EndPtsOfContours {
		if tmp87 < tmp88 {
			tmp87 = tmp88
		}
	}
	this.pointCount = int(tmp87 + 1)
	return this.pointCount, nil
}
type Ttf_Glyf_SimpleGlyph_Flag struct {
	Reserved uint64
	YIsSame bool
	XIsSame bool
	Repeat bool
	YShortVector bool
	XShortVector bool
	OnCurve bool
	RepeatValue uint8
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Glyf_SimpleGlyph
}
func NewTtf_Glyf_SimpleGlyph_Flag() *Ttf_Glyf_SimpleGlyph_Flag {
	return &Ttf_Glyf_SimpleGlyph_Flag{
	}
}

func (this Ttf_Glyf_SimpleGlyph_Flag) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Glyf_SimpleGlyph_Flag) Read(io *kaitai.Stream, parent *Ttf_Glyf_SimpleGlyph, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp89, err := this._io.ReadBitsIntBe(2)
	if err != nil {
		return err
	}
	this.Reserved = tmp89
	tmp90, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.YIsSame = tmp90 != 0
	tmp91, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.XIsSame = tmp91 != 0
	tmp92, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Repeat = tmp92 != 0
	tmp93, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.YShortVector = tmp93 != 0
	tmp94, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.XShortVector = tmp94 != 0
	tmp95, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.OnCurve = tmp95 != 0
	this._io.AlignToByte()
	if (this.Repeat) {
		tmp96, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.RepeatValue = tmp96
	}
	return err
}

type Ttf_Head_Flags int
const (
	Ttf_Head_Flags__BaselineAtY0 Ttf_Head_Flags = 1
	Ttf_Head_Flags__LeftSidebearingAtX0 Ttf_Head_Flags = 2
	Ttf_Head_Flags__FlagDependOnPointSize Ttf_Head_Flags = 4
	Ttf_Head_Flags__FlagForcePpem Ttf_Head_Flags = 8
	Ttf_Head_Flags__FlagMayAdvanceWidth Ttf_Head_Flags = 16
)
var values_Ttf_Head_Flags = map[Ttf_Head_Flags]struct{}{1: {}, 2: {}, 4: {}, 8: {}, 16: {}}
func (v Ttf_Head_Flags) isDefined() bool {
	_, ok := values_Ttf_Head_Flags[v]
	return ok
}

type Ttf_Head_FontDirectionHint int
const (
	Ttf_Head_FontDirectionHint__FullyMixedDirectionalGlyphs Ttf_Head_FontDirectionHint = 0
	Ttf_Head_FontDirectionHint__OnlyStronglyLeftToRight Ttf_Head_FontDirectionHint = 1
	Ttf_Head_FontDirectionHint__StronglyLeftToRightAndNeutrals Ttf_Head_FontDirectionHint = 2
)
var values_Ttf_Head_FontDirectionHint = map[Ttf_Head_FontDirectionHint]struct{}{0: {}, 1: {}, 2: {}}
func (v Ttf_Head_FontDirectionHint) isDefined() bool {
	_, ok := values_Ttf_Head_FontDirectionHint[v]
	return ok
}
type Ttf_Head struct {
	Version *Ttf_Fixed
	FontRevision *Ttf_Fixed
	ChecksumAdjustment uint32
	MagicNumber []byte
	Flags Ttf_Head_Flags
	UnitsPerEm uint16
	Created uint64
	Modified uint64
	XMin int16
	YMin int16
	XMax int16
	YMax int16
	MacStyle uint16
	LowestRecPpem uint16
	FontDirectionHint Ttf_Head_FontDirectionHint
	IndexToLocFormat int16
	GlyphDataFormat int16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Head() *Ttf_Head {
	return &Ttf_Head{
	}
}

func (this Ttf_Head) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Head) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp97 := NewTtf_Fixed()
	err = tmp97.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Version = tmp97
	tmp98 := NewTtf_Fixed()
	err = tmp98.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.FontRevision = tmp98
	tmp99, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.ChecksumAdjustment = uint32(tmp99)
	tmp100, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp100 = tmp100
	this.MagicNumber = tmp100
	if !(bytes.Equal(this.MagicNumber, []uint8{95, 15, 60, 245})) {
		return kaitai.NewValidationNotEqualError([]uint8{95, 15, 60, 245}, this.MagicNumber, this._io, "/types/head/seq/3")
	}
	tmp101, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Flags = Ttf_Head_Flags(tmp101)
	tmp102, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.UnitsPerEm = uint16(tmp102)
	tmp103, err := this._io.ReadU8be()
	if err != nil {
		return err
	}
	this.Created = uint64(tmp103)
	tmp104, err := this._io.ReadU8be()
	if err != nil {
		return err
	}
	this.Modified = uint64(tmp104)
	tmp105, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.XMin = int16(tmp105)
	tmp106, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YMin = int16(tmp106)
	tmp107, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.XMax = int16(tmp107)
	tmp108, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YMax = int16(tmp108)
	tmp109, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MacStyle = uint16(tmp109)
	tmp110, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.LowestRecPpem = uint16(tmp110)
	tmp111, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.FontDirectionHint = Ttf_Head_FontDirectionHint(tmp111)
	tmp112, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.IndexToLocFormat = int16(tmp112)
	tmp113, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.GlyphDataFormat = int16(tmp113)
	return err
}
type Ttf_Hhea struct {
	Version *Ttf_Fixed
	Ascender int16
	Descender int16
	LineGap int16
	AdvanceWidthMax uint16
	MinLeftSideBearing int16
	MinRightSideBearing int16
	XMaxExtend int16
	CaretSlopeRise int16
	CaretSlopeRun int16
	Reserved []byte
	MetricDataFormat int16
	NumberOfHmetrics uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Hhea() *Ttf_Hhea {
	return &Ttf_Hhea{
	}
}

func (this Ttf_Hhea) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Hhea) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp114 := NewTtf_Fixed()
	err = tmp114.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Version = tmp114
	tmp115, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.Ascender = int16(tmp115)
	tmp116, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.Descender = int16(tmp116)
	tmp117, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.LineGap = int16(tmp117)
	tmp118, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.AdvanceWidthMax = uint16(tmp118)
	tmp119, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.MinLeftSideBearing = int16(tmp119)
	tmp120, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.MinRightSideBearing = int16(tmp120)
	tmp121, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.XMaxExtend = int16(tmp121)
	tmp122, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.CaretSlopeRise = int16(tmp122)
	tmp123, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.CaretSlopeRun = int16(tmp123)
	tmp124, err := this._io.ReadBytes(int(10))
	if err != nil {
		return err
	}
	tmp124 = tmp124
	this.Reserved = tmp124
	if !(bytes.Equal(this.Reserved, []uint8{0, 0, 0, 0, 0, 0, 0, 0, 0, 0})) {
		return kaitai.NewValidationNotEqualError([]uint8{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, this.Reserved, this._io, "/types/hhea/seq/10")
	}
	tmp125, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.MetricDataFormat = int16(tmp125)
	tmp126, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.NumberOfHmetrics = uint16(tmp126)
	return err
}

/**
 * Typographic ascent
 */

/**
 * Typographic descent
 */

/**
 * Typographic line gap. Negative LineGap values are treated as zero in Windows 3.1, System 6, and System 7.
 */

/**
 * Maximum advance width value in `hmtx` table.
 */

/**
 * Minimum left sidebearing value in `hmtx` table.
 */

/**
 * Minimum right sidebearing value; calculated as Min(aw - lsb - (xMax - xMin)).
 */

/**
 * Max(lsb + (xMax - xMin)).
 */
type Ttf_Kern struct {
	Version uint16
	SubtableCount uint16
	Subtables []*Ttf_Kern_Subtable
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Kern() *Ttf_Kern {
	return &Ttf_Kern{
	}
}

func (this Ttf_Kern) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Kern) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp127, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Version = uint16(tmp127)
	tmp128, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.SubtableCount = uint16(tmp128)
	for i := 0; i < int(this.SubtableCount); i++ {
		_ = i
		tmp129 := NewTtf_Kern_Subtable()
		err = tmp129.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Subtables = append(this.Subtables, tmp129)
	}
	return err
}
type Ttf_Kern_Subtable struct {
	Version uint16
	Length uint16
	Format uint8
	Reserved uint64
	IsOverride bool
	IsCrossStream bool
	IsMinimum bool
	IsHorizontal bool
	Format0 *Ttf_Kern_Subtable_Format0
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Kern
}
func NewTtf_Kern_Subtable() *Ttf_Kern_Subtable {
	return &Ttf_Kern_Subtable{
	}
}

func (this Ttf_Kern_Subtable) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Kern_Subtable) Read(io *kaitai.Stream, parent *Ttf_Kern, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp130, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Version = uint16(tmp130)
	tmp131, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Length = uint16(tmp131)
	tmp132, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Format = tmp132
	tmp133, err := this._io.ReadBitsIntBe(4)
	if err != nil {
		return err
	}
	this.Reserved = tmp133
	tmp134, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.IsOverride = tmp134 != 0
	tmp135, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.IsCrossStream = tmp135 != 0
	tmp136, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.IsMinimum = tmp136 != 0
	tmp137, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.IsHorizontal = tmp137 != 0
	this._io.AlignToByte()
	if (this.Format == 0) {
		tmp138 := NewTtf_Kern_Subtable_Format0()
		err = tmp138.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Format0 = tmp138
	}
	return err
}
type Ttf_Kern_Subtable_Format0 struct {
	PairCount uint16
	SearchRange uint16
	EntrySelector uint16
	RangeShift uint16
	KerningPairs []*Ttf_Kern_Subtable_Format0_KerningPair
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Kern_Subtable
}
func NewTtf_Kern_Subtable_Format0() *Ttf_Kern_Subtable_Format0 {
	return &Ttf_Kern_Subtable_Format0{
	}
}

func (this Ttf_Kern_Subtable_Format0) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Kern_Subtable_Format0) Read(io *kaitai.Stream, parent *Ttf_Kern_Subtable, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp139, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.PairCount = uint16(tmp139)
	tmp140, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.SearchRange = uint16(tmp140)
	tmp141, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.EntrySelector = uint16(tmp141)
	tmp142, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.RangeShift = uint16(tmp142)
	for i := 0; i < int(this.PairCount); i++ {
		_ = i
		tmp143 := NewTtf_Kern_Subtable_Format0_KerningPair()
		err = tmp143.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.KerningPairs = append(this.KerningPairs, tmp143)
	}
	return err
}
type Ttf_Kern_Subtable_Format0_KerningPair struct {
	Left uint16
	Right uint16
	Value int16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Kern_Subtable_Format0
}
func NewTtf_Kern_Subtable_Format0_KerningPair() *Ttf_Kern_Subtable_Format0_KerningPair {
	return &Ttf_Kern_Subtable_Format0_KerningPair{
	}
}

func (this Ttf_Kern_Subtable_Format0_KerningPair) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Kern_Subtable_Format0_KerningPair) Read(io *kaitai.Stream, parent *Ttf_Kern_Subtable_Format0, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp144, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Left = uint16(tmp144)
	tmp145, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Right = uint16(tmp145)
	tmp146, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.Value = int16(tmp146)
	return err
}
type Ttf_Maxp struct {
	TableVersionNumber *Ttf_Fixed
	NumGlyphs uint16
	Version10Body *Ttf_MaxpVersion10Body
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
	_f_isVersion10 bool
	isVersion10 bool
}
func NewTtf_Maxp() *Ttf_Maxp {
	return &Ttf_Maxp{
	}
}

func (this Ttf_Maxp) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Maxp) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp147 := NewTtf_Fixed()
	err = tmp147.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TableVersionNumber = tmp147
	tmp148, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.NumGlyphs = uint16(tmp148)
	tmp149, err := this.IsVersion10()
	if err != nil {
		return err
	}
	if (tmp149) {
		tmp150 := NewTtf_MaxpVersion10Body()
		err = tmp150.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Version10Body = tmp150
	}
	return err
}
func (this *Ttf_Maxp) IsVersion10() (v bool, err error) {
	if (this._f_isVersion10) {
		return this.isVersion10, nil
	}
	this._f_isVersion10 = true
	this.isVersion10 = bool( ((this.TableVersionNumber.Major == 1) && (this.TableVersionNumber.Minor == 0)) )
	return this.isVersion10, nil
}

/**
 * 0x00010000 for version 1.0.
 */

/**
 * The number of glyphs in the font.
 */
type Ttf_MaxpVersion10Body struct {
	MaxPoints uint16
	MaxContours uint16
	MaxCompositePoints uint16
	MaxCompositeContours uint16
	MaxZones uint16
	MaxTwilightPoints uint16
	MaxStorage uint16
	MaxFunctionDefs uint16
	MaxInstructionDefs uint16
	MaxStackElements uint16
	MaxSizeOfInstructions uint16
	MaxComponentElements uint16
	MaxComponentDepth uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Maxp
}
func NewTtf_MaxpVersion10Body() *Ttf_MaxpVersion10Body {
	return &Ttf_MaxpVersion10Body{
	}
}

func (this Ttf_MaxpVersion10Body) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_MaxpVersion10Body) Read(io *kaitai.Stream, parent *Ttf_Maxp, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp151, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxPoints = uint16(tmp151)
	tmp152, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxContours = uint16(tmp152)
	tmp153, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxCompositePoints = uint16(tmp153)
	tmp154, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxCompositeContours = uint16(tmp154)
	tmp155, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxZones = uint16(tmp155)
	tmp156, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxTwilightPoints = uint16(tmp156)
	tmp157, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxStorage = uint16(tmp157)
	tmp158, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxFunctionDefs = uint16(tmp158)
	tmp159, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxInstructionDefs = uint16(tmp159)
	tmp160, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxStackElements = uint16(tmp160)
	tmp161, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxSizeOfInstructions = uint16(tmp161)
	tmp162, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxComponentElements = uint16(tmp162)
	tmp163, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.MaxComponentDepth = uint16(tmp163)
	return err
}

/**
 * Maximum points in a non-composite glyph.
 */

/**
 * Maximum contours in a non-composite glyph.
 */

/**
 * Maximum points in a composite glyph.
 */

/**
 * Maximum contours in a composite glyph.
 */

/**
 * 1 if instructions do not use the twilight zone (Z0), or 2 if instructions do use Z0; should be set to 2 in most cases.
 */

/**
 * Maximum points used in Z0.
 */

/**
 * Number of Storage Area locations.
 */

/**
 * Number of FDEFs.
 */

/**
 * Number of IDEFs.
 */

/**
 * Maximum stack depth.
 */

/**
 * Maximum byte count for glyph instructions.
 */

/**
 * Maximum number of components referenced at "top level" for any composite glyph.
 */

/**
 * Maximum levels of recursion; 1 for simple components.
 */

/**
 * Name table is meant to include human-readable string metadata
 * that describes font: name of the font, its styles, copyright &
 * trademark notices, vendor and designer info, etc.
 * 
 * The table includes a list of "name records", each of which
 * corresponds to a single metadata entry.
 * @see <a href="https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html">Source</a>
 */

type Ttf_Name_Names int
const (
	Ttf_Name_Names__Copyright Ttf_Name_Names = 0
	Ttf_Name_Names__FontFamily Ttf_Name_Names = 1
	Ttf_Name_Names__FontSubfamily Ttf_Name_Names = 2
	Ttf_Name_Names__UniqueSubfamilyId Ttf_Name_Names = 3
	Ttf_Name_Names__FullFontName Ttf_Name_Names = 4
	Ttf_Name_Names__NameTableVersion Ttf_Name_Names = 5
	Ttf_Name_Names__PostscriptFontName Ttf_Name_Names = 6
	Ttf_Name_Names__Trademark Ttf_Name_Names = 7
	Ttf_Name_Names__Manufacturer Ttf_Name_Names = 8
	Ttf_Name_Names__Designer Ttf_Name_Names = 9
	Ttf_Name_Names__Description Ttf_Name_Names = 10
	Ttf_Name_Names__UrlVendor Ttf_Name_Names = 11
	Ttf_Name_Names__UrlDesigner Ttf_Name_Names = 12
	Ttf_Name_Names__License Ttf_Name_Names = 13
	Ttf_Name_Names__UrlLicense Ttf_Name_Names = 14
	Ttf_Name_Names__Reserved15 Ttf_Name_Names = 15
	Ttf_Name_Names__PreferredFamily Ttf_Name_Names = 16
	Ttf_Name_Names__PreferredSubfamily Ttf_Name_Names = 17
	Ttf_Name_Names__CompatibleFullName Ttf_Name_Names = 18
	Ttf_Name_Names__SampleText Ttf_Name_Names = 19
)
var values_Ttf_Name_Names = map[Ttf_Name_Names]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {}, 12: {}, 13: {}, 14: {}, 15: {}, 16: {}, 17: {}, 18: {}, 19: {}}
func (v Ttf_Name_Names) isDefined() bool {
	_, ok := values_Ttf_Name_Names[v]
	return ok
}

type Ttf_Name_Platforms int
const (
	Ttf_Name_Platforms__Unicode Ttf_Name_Platforms = 0
	Ttf_Name_Platforms__Macintosh Ttf_Name_Platforms = 1
	Ttf_Name_Platforms__Reserved2 Ttf_Name_Platforms = 2
	Ttf_Name_Platforms__Microsoft Ttf_Name_Platforms = 3
)
var values_Ttf_Name_Platforms = map[Ttf_Name_Platforms]struct{}{0: {}, 1: {}, 2: {}, 3: {}}
func (v Ttf_Name_Platforms) isDefined() bool {
	_, ok := values_Ttf_Name_Platforms[v]
	return ok
}
type Ttf_Name struct {
	FormatSelector uint16
	NumNameRecords uint16
	OfsStrings uint16
	NameRecords []*Ttf_Name_NameRecord
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Name() *Ttf_Name {
	return &Ttf_Name{
	}
}

func (this Ttf_Name) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Name) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp164, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.FormatSelector = uint16(tmp164)
	tmp165, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.NumNameRecords = uint16(tmp165)
	tmp166, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.OfsStrings = uint16(tmp166)
	for i := 0; i < int(this.NumNameRecords); i++ {
		_ = i
		tmp167 := NewTtf_Name_NameRecord()
		err = tmp167.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.NameRecords = append(this.NameRecords, tmp167)
	}
	return err
}
type Ttf_Name_NameRecord struct {
	PlatformId Ttf_Name_Platforms
	EncodingId uint16
	LanguageId uint16
	NameId Ttf_Name_Names
	LenStr uint16
	OfsStr uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Name
	_f_asciiValue bool
	asciiValue string
	_f_unicodeValue bool
	unicodeValue string
}
func NewTtf_Name_NameRecord() *Ttf_Name_NameRecord {
	return &Ttf_Name_NameRecord{
	}
}

func (this Ttf_Name_NameRecord) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Name_NameRecord) Read(io *kaitai.Stream, parent *Ttf_Name, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp168, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.PlatformId = Ttf_Name_Platforms(tmp168)
	tmp169, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.EncodingId = uint16(tmp169)
	tmp170, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.LanguageId = uint16(tmp170)
	tmp171, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.NameId = Ttf_Name_Names(tmp171)
	tmp172, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.LenStr = uint16(tmp172)
	tmp173, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.OfsStr = uint16(tmp173)
	return err
}
func (this *Ttf_Name_NameRecord) AsciiValue() (v string, err error) {
	if (this._f_asciiValue) {
		return this.asciiValue, nil
	}
	this._f_asciiValue = true
	thisIo := this._parent._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return "", err
	}
	_, err = thisIo.Seek(int64(this._parent.OfsStrings + this.OfsStr), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp174, err := thisIo.ReadBytes(int(this.LenStr))
	if err != nil {
		return "", err
	}
	tmp174 = tmp174
	this.asciiValue = string(tmp174)
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	return this.asciiValue, nil
}
func (this *Ttf_Name_NameRecord) UnicodeValue() (v string, err error) {
	if (this._f_unicodeValue) {
		return this.unicodeValue, nil
	}
	this._f_unicodeValue = true
	thisIo := this._parent._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return "", err
	}
	_, err = thisIo.Seek(int64(this._parent.OfsStrings + this.OfsStr), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp175, err := thisIo.ReadBytes(int(this.LenStr))
	if err != nil {
		return "", err
	}
	tmp175 = tmp175
	tmp176, err := kaitai.BytesToStr(tmp175, unicode.UTF16(unicode.BigEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return "", err
	}
	this.unicodeValue = tmp176
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	return this.unicodeValue, nil
}
type Ttf_OffsetTable struct {
	SfntVersion *Ttf_Fixed
	NumTables uint16
	SearchRange uint16
	EntrySelector uint16
	RangeShift uint16
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf
}
func NewTtf_OffsetTable() *Ttf_OffsetTable {
	return &Ttf_OffsetTable{
	}
}

func (this Ttf_OffsetTable) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_OffsetTable) Read(io *kaitai.Stream, parent *Ttf, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp177 := NewTtf_Fixed()
	err = tmp177.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.SfntVersion = tmp177
	tmp178, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.NumTables = uint16(tmp178)
	tmp179, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.SearchRange = uint16(tmp179)
	tmp180, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.EntrySelector = uint16(tmp180)
	tmp181, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.RangeShift = uint16(tmp181)
	return err
}

/**
 * The OS/2 table consists of a set of metrics that are required by Windows and OS/2.
 */

type Ttf_Os2_FsSelection int
const (
	Ttf_Os2_FsSelection__Italic Ttf_Os2_FsSelection = 1
	Ttf_Os2_FsSelection__Underscore Ttf_Os2_FsSelection = 2
	Ttf_Os2_FsSelection__Negative Ttf_Os2_FsSelection = 4
	Ttf_Os2_FsSelection__Outlined Ttf_Os2_FsSelection = 8
	Ttf_Os2_FsSelection__Strikeout Ttf_Os2_FsSelection = 16
	Ttf_Os2_FsSelection__Bold Ttf_Os2_FsSelection = 32
	Ttf_Os2_FsSelection__Regular Ttf_Os2_FsSelection = 64
)
var values_Ttf_Os2_FsSelection = map[Ttf_Os2_FsSelection]struct{}{1: {}, 2: {}, 4: {}, 8: {}, 16: {}, 32: {}, 64: {}}
func (v Ttf_Os2_FsSelection) isDefined() bool {
	_, ok := values_Ttf_Os2_FsSelection[v]
	return ok
}

type Ttf_Os2_FsType int
const (
	Ttf_Os2_FsType__RestrictedLicenseEmbedding Ttf_Os2_FsType = 2
	Ttf_Os2_FsType__PreviewAndPrintEmbedding Ttf_Os2_FsType = 4
	Ttf_Os2_FsType__EditableEmbedding Ttf_Os2_FsType = 8
)
var values_Ttf_Os2_FsType = map[Ttf_Os2_FsType]struct{}{2: {}, 4: {}, 8: {}}
func (v Ttf_Os2_FsType) isDefined() bool {
	_, ok := values_Ttf_Os2_FsType[v]
	return ok
}

type Ttf_Os2_WeightClass int
const (
	Ttf_Os2_WeightClass__Thin Ttf_Os2_WeightClass = 100
	Ttf_Os2_WeightClass__ExtraLight Ttf_Os2_WeightClass = 200
	Ttf_Os2_WeightClass__Light Ttf_Os2_WeightClass = 300
	Ttf_Os2_WeightClass__Normal Ttf_Os2_WeightClass = 400
	Ttf_Os2_WeightClass__Medium Ttf_Os2_WeightClass = 500
	Ttf_Os2_WeightClass__SemiBold Ttf_Os2_WeightClass = 600
	Ttf_Os2_WeightClass__Bold Ttf_Os2_WeightClass = 700
	Ttf_Os2_WeightClass__ExtraBold Ttf_Os2_WeightClass = 800
	Ttf_Os2_WeightClass__Black Ttf_Os2_WeightClass = 900
)
var values_Ttf_Os2_WeightClass = map[Ttf_Os2_WeightClass]struct{}{100: {}, 200: {}, 300: {}, 400: {}, 500: {}, 600: {}, 700: {}, 800: {}, 900: {}}
func (v Ttf_Os2_WeightClass) isDefined() bool {
	_, ok := values_Ttf_Os2_WeightClass[v]
	return ok
}

type Ttf_Os2_WidthClass int
const (
	Ttf_Os2_WidthClass__UltraCondensed Ttf_Os2_WidthClass = 1
	Ttf_Os2_WidthClass__ExtraCondensed Ttf_Os2_WidthClass = 2
	Ttf_Os2_WidthClass__Condensed Ttf_Os2_WidthClass = 3
	Ttf_Os2_WidthClass__SemiCondensed Ttf_Os2_WidthClass = 4
	Ttf_Os2_WidthClass__Normal Ttf_Os2_WidthClass = 5
	Ttf_Os2_WidthClass__SemiExpanded Ttf_Os2_WidthClass = 6
	Ttf_Os2_WidthClass__Expanded Ttf_Os2_WidthClass = 7
	Ttf_Os2_WidthClass__ExtraExpanded Ttf_Os2_WidthClass = 8
	Ttf_Os2_WidthClass__UltraExpanded Ttf_Os2_WidthClass = 9
)
var values_Ttf_Os2_WidthClass = map[Ttf_Os2_WidthClass]struct{}{1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}}
func (v Ttf_Os2_WidthClass) isDefined() bool {
	_, ok := values_Ttf_Os2_WidthClass[v]
	return ok
}
type Ttf_Os2 struct {
	Version uint16
	XAvgCharWidth int16
	WeightClass Ttf_Os2_WeightClass
	WidthClass Ttf_Os2_WidthClass
	FsType Ttf_Os2_FsType
	YSubscriptXSize int16
	YSubscriptYSize int16
	YSubscriptXOffset int16
	YSubscriptYOffset int16
	YSuperscriptXSize int16
	YSuperscriptYSize int16
	YSuperscriptXOffset int16
	YSuperscriptYOffset int16
	YStrikeoutSize int16
	YStrikeoutPosition int16
	SFamilyClass int16
	Panose *Ttf_Os2_Panose
	UnicodeRange *Ttf_Os2_UnicodeRange
	AchVendId string
	Selection Ttf_Os2_FsSelection
	FirstCharIndex uint16
	LastCharIndex uint16
	TypoAscender int16
	TypoDescender int16
	TypoLineGap int16
	WinAscent uint16
	WinDescent uint16
	CodePageRange *Ttf_Os2_CodePageRange
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Os2() *Ttf_Os2 {
	return &Ttf_Os2{
	}
}

func (this Ttf_Os2) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Os2) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp182, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Version = uint16(tmp182)
	tmp183, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.XAvgCharWidth = int16(tmp183)
	tmp184, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.WeightClass = Ttf_Os2_WeightClass(tmp184)
	tmp185, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.WidthClass = Ttf_Os2_WidthClass(tmp185)
	tmp186, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.FsType = Ttf_Os2_FsType(tmp186)
	tmp187, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSubscriptXSize = int16(tmp187)
	tmp188, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSubscriptYSize = int16(tmp188)
	tmp189, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSubscriptXOffset = int16(tmp189)
	tmp190, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSubscriptYOffset = int16(tmp190)
	tmp191, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSuperscriptXSize = int16(tmp191)
	tmp192, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSuperscriptYSize = int16(tmp192)
	tmp193, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSuperscriptXOffset = int16(tmp193)
	tmp194, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YSuperscriptYOffset = int16(tmp194)
	tmp195, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YStrikeoutSize = int16(tmp195)
	tmp196, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.YStrikeoutPosition = int16(tmp196)
	tmp197, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.SFamilyClass = int16(tmp197)
	tmp198 := NewTtf_Os2_Panose()
	err = tmp198.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Panose = tmp198
	tmp199 := NewTtf_Os2_UnicodeRange()
	err = tmp199.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.UnicodeRange = tmp199
	tmp200, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp200 = tmp200
	this.AchVendId = string(tmp200)
	tmp201, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Selection = Ttf_Os2_FsSelection(tmp201)
	tmp202, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.FirstCharIndex = uint16(tmp202)
	tmp203, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.LastCharIndex = uint16(tmp203)
	tmp204, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.TypoAscender = int16(tmp204)
	tmp205, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.TypoDescender = int16(tmp205)
	tmp206, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.TypoLineGap = int16(tmp206)
	tmp207, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.WinAscent = uint16(tmp207)
	tmp208, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.WinDescent = uint16(tmp208)
	tmp209 := NewTtf_Os2_CodePageRange()
	err = tmp209.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.CodePageRange = tmp209
	return err
}

/**
 * The version number for this OS/2 table.
 */

/**
 * The Average Character Width parameter specifies the arithmetic average of the escapement (width) of all of the 26 lowercase letters a through z of the Latin alphabet and the space character. If any of the 26 lowercase letters are not present, this parameter should equal the weighted average of all glyphs in the font. For non-UGL (platform 3, encoding 0) fonts, use the unweighted average.
 */

/**
 * Indicates the visual weight (degree of blackness or thickness of strokes) of the characters in the font.
 */

/**
 * Indicates a relative change from the normal aspect ratio (width to height ratio) as specified by a font designer for the glyphs in a font.
 */

/**
 * Indicates font embedding licensing rights for the font. Embeddable fonts may be stored in a document. When a document with embedded fonts is opened on a system that does not have the font installed (the remote system), the embedded font may be loaded for temporary (and in some cases, permanent) use on that system by an embedding-aware application. Embedding licensing rights are granted by the vendor of the font.
 */

/**
 * The recommended horizontal size in font design units for subscripts for this font.
 */

/**
 * The recommended vertical size in font design units for subscripts for this font.
 */

/**
 * The recommended horizontal offset in font design untis for subscripts for this font.
 */

/**
 * The recommended vertical offset in font design units from the baseline for subscripts for this font.
 */

/**
 * The recommended horizontal size in font design units for superscripts for this font.
 */

/**
 * The recommended vertical size in font design units for superscripts for this font.
 */

/**
 * The recommended horizontal offset in font design units for superscripts for this font.
 */

/**
 * The recommended vertical offset in font design units from the baseline for superscripts for this font.
 */

/**
 * Width of the strikeout stroke in font design units.
 */

/**
 * The position of the strikeout stroke relative to the baseline in font design units.
 */

/**
 * This parameter is a classification of font-family design.
 */

/**
 * The four character identifier for the vendor of the given type face.
 */

/**
 * Contains information concerning the nature of the font patterns
 */

/**
 * The minimum Unicode index (character code) in this font, according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
 */

/**
 * The maximum Unicode index (character code) in this font, according to the cmap subtable for platform ID 3 and encoding ID 0 or 1.
 */

/**
 * The typographic ascender for this font.
 */

/**
 * The typographic descender for this font.
 */

/**
 * The typographic line gap for this font.
 */

/**
 * The ascender metric for Windows.
 */

/**
 * The descender metric for Windows.
 */

/**
 * This field is used to specify the code pages encompassed by the font file in the `cmap` subtable for platform 3, encoding ID 1 (Microsoft platform).
 */
type Ttf_Os2_CodePageRange struct {
	SymbolCharacterSet bool
	OemCharacterSet bool
	MacintoshCharacterSet bool
	ReservedForAlternateAnsiOem uint64
	Cp1361KoreanJohab bool
	Cp950ChineseTraditionalCharsTaiwanAndHongKong bool
	Cp949KoreanWansung bool
	Cp936ChineseSimplifiedCharsPrcAndSingapore bool
	Cp932JisJapan bool
	Cp874Thai bool
	ReservedForAlternateAnsi uint64
	Cp1257WindowsBaltic bool
	Cp1256Arabic bool
	Cp1255Hebrew bool
	Cp1254Turkish bool
	Cp1253Greek bool
	Cp1251Cyrillic bool
	Cp1250Latin2EasternEurope bool
	Cp1252Latin1 bool
	Cp437Us bool
	Cp850WeLatin1 bool
	Cp708ArabicAsmo708 bool
	Cp737GreekFormer437G bool
	Cp775MsDosBaltic bool
	Cp852Latin2 bool
	Cp855IbmCyrillicPrimarilyRussian bool
	Cp857IbmTurkish bool
	Cp860MsDosPortuguese bool
	Cp861MsDosIcelandic bool
	Cp862Hebrew bool
	Cp863MsDosCanadianFrench bool
	Cp864Arabic bool
	Cp865MsDosNordic bool
	Cp866MsDosRussian bool
	Cp869IbmGreek bool
	ReservedForOem uint64
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Os2
}
func NewTtf_Os2_CodePageRange() *Ttf_Os2_CodePageRange {
	return &Ttf_Os2_CodePageRange{
	}
}

func (this Ttf_Os2_CodePageRange) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Os2_CodePageRange) Read(io *kaitai.Stream, parent *Ttf_Os2, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp210, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.SymbolCharacterSet = tmp210 != 0
	tmp211, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.OemCharacterSet = tmp211 != 0
	tmp212, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.MacintoshCharacterSet = tmp212 != 0
	tmp213, err := this._io.ReadBitsIntBe(7)
	if err != nil {
		return err
	}
	this.ReservedForAlternateAnsiOem = tmp213
	tmp214, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1361KoreanJohab = tmp214 != 0
	tmp215, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp950ChineseTraditionalCharsTaiwanAndHongKong = tmp215 != 0
	tmp216, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp949KoreanWansung = tmp216 != 0
	tmp217, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp936ChineseSimplifiedCharsPrcAndSingapore = tmp217 != 0
	tmp218, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp932JisJapan = tmp218 != 0
	tmp219, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp874Thai = tmp219 != 0
	tmp220, err := this._io.ReadBitsIntBe(8)
	if err != nil {
		return err
	}
	this.ReservedForAlternateAnsi = tmp220
	tmp221, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1257WindowsBaltic = tmp221 != 0
	tmp222, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1256Arabic = tmp222 != 0
	tmp223, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1255Hebrew = tmp223 != 0
	tmp224, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1254Turkish = tmp224 != 0
	tmp225, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1253Greek = tmp225 != 0
	tmp226, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1251Cyrillic = tmp226 != 0
	tmp227, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1250Latin2EasternEurope = tmp227 != 0
	tmp228, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp1252Latin1 = tmp228 != 0
	tmp229, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp437Us = tmp229 != 0
	tmp230, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp850WeLatin1 = tmp230 != 0
	tmp231, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp708ArabicAsmo708 = tmp231 != 0
	tmp232, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp737GreekFormer437G = tmp232 != 0
	tmp233, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp775MsDosBaltic = tmp233 != 0
	tmp234, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp852Latin2 = tmp234 != 0
	tmp235, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp855IbmCyrillicPrimarilyRussian = tmp235 != 0
	tmp236, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp857IbmTurkish = tmp236 != 0
	tmp237, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp860MsDosPortuguese = tmp237 != 0
	tmp238, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp861MsDosIcelandic = tmp238 != 0
	tmp239, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp862Hebrew = tmp239 != 0
	tmp240, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp863MsDosCanadianFrench = tmp240 != 0
	tmp241, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp864Arabic = tmp241 != 0
	tmp242, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp865MsDosNordic = tmp242 != 0
	tmp243, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp866MsDosRussian = tmp243 != 0
	tmp244, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cp869IbmGreek = tmp244 != 0
	tmp245, err := this._io.ReadBitsIntBe(16)
	if err != nil {
		return err
	}
	this.ReservedForOem = tmp245
	return err
}

type Ttf_Os2_Panose_ArmStyle int
const (
	Ttf_Os2_Panose_ArmStyle__Any Ttf_Os2_Panose_ArmStyle = 0
	Ttf_Os2_Panose_ArmStyle__NoFit Ttf_Os2_Panose_ArmStyle = 1
	Ttf_Os2_Panose_ArmStyle__StraightArmsHorizontal Ttf_Os2_Panose_ArmStyle = 2
	Ttf_Os2_Panose_ArmStyle__StraightArmsWedge Ttf_Os2_Panose_ArmStyle = 3
	Ttf_Os2_Panose_ArmStyle__StraightArmsVertical Ttf_Os2_Panose_ArmStyle = 4
	Ttf_Os2_Panose_ArmStyle__StraightArmsSingleSerif Ttf_Os2_Panose_ArmStyle = 5
	Ttf_Os2_Panose_ArmStyle__StraightArmsDoubleSerif Ttf_Os2_Panose_ArmStyle = 6
	Ttf_Os2_Panose_ArmStyle__NonStraightArmsHorizontal Ttf_Os2_Panose_ArmStyle = 7
	Ttf_Os2_Panose_ArmStyle__NonStraightArmsWedge Ttf_Os2_Panose_ArmStyle = 8
	Ttf_Os2_Panose_ArmStyle__NonStraightArmsVertical Ttf_Os2_Panose_ArmStyle = 9
	Ttf_Os2_Panose_ArmStyle__NonStraightArmsSingleSerif Ttf_Os2_Panose_ArmStyle = 10
	Ttf_Os2_Panose_ArmStyle__NonStraightArmsDoubleSerif Ttf_Os2_Panose_ArmStyle = 11
)
var values_Ttf_Os2_Panose_ArmStyle = map[Ttf_Os2_Panose_ArmStyle]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {}}
func (v Ttf_Os2_Panose_ArmStyle) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_ArmStyle[v]
	return ok
}

type Ttf_Os2_Panose_Contrast int
const (
	Ttf_Os2_Panose_Contrast__Any Ttf_Os2_Panose_Contrast = 0
	Ttf_Os2_Panose_Contrast__NoFit Ttf_Os2_Panose_Contrast = 1
	Ttf_Os2_Panose_Contrast__None Ttf_Os2_Panose_Contrast = 2
	Ttf_Os2_Panose_Contrast__VeryLow Ttf_Os2_Panose_Contrast = 3
	Ttf_Os2_Panose_Contrast__Low Ttf_Os2_Panose_Contrast = 4
	Ttf_Os2_Panose_Contrast__MediumLow Ttf_Os2_Panose_Contrast = 5
	Ttf_Os2_Panose_Contrast__Medium Ttf_Os2_Panose_Contrast = 6
	Ttf_Os2_Panose_Contrast__MediumHigh Ttf_Os2_Panose_Contrast = 7
	Ttf_Os2_Panose_Contrast__High Ttf_Os2_Panose_Contrast = 8
	Ttf_Os2_Panose_Contrast__VeryHigh Ttf_Os2_Panose_Contrast = 9
)
var values_Ttf_Os2_Panose_Contrast = map[Ttf_Os2_Panose_Contrast]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}}
func (v Ttf_Os2_Panose_Contrast) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_Contrast[v]
	return ok
}

type Ttf_Os2_Panose_FamilyKind int
const (
	Ttf_Os2_Panose_FamilyKind__Any Ttf_Os2_Panose_FamilyKind = 0
	Ttf_Os2_Panose_FamilyKind__NoFit Ttf_Os2_Panose_FamilyKind = 1
	Ttf_Os2_Panose_FamilyKind__TextAndDisplay Ttf_Os2_Panose_FamilyKind = 2
	Ttf_Os2_Panose_FamilyKind__Script Ttf_Os2_Panose_FamilyKind = 3
	Ttf_Os2_Panose_FamilyKind__Decorative Ttf_Os2_Panose_FamilyKind = 4
	Ttf_Os2_Panose_FamilyKind__Pictorial Ttf_Os2_Panose_FamilyKind = 5
)
var values_Ttf_Os2_Panose_FamilyKind = map[Ttf_Os2_Panose_FamilyKind]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}}
func (v Ttf_Os2_Panose_FamilyKind) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_FamilyKind[v]
	return ok
}

type Ttf_Os2_Panose_LetterForm int
const (
	Ttf_Os2_Panose_LetterForm__Any Ttf_Os2_Panose_LetterForm = 0
	Ttf_Os2_Panose_LetterForm__NoFit Ttf_Os2_Panose_LetterForm = 1
	Ttf_Os2_Panose_LetterForm__NormalContact Ttf_Os2_Panose_LetterForm = 2
	Ttf_Os2_Panose_LetterForm__NormalWeighted Ttf_Os2_Panose_LetterForm = 3
	Ttf_Os2_Panose_LetterForm__NormalBoxed Ttf_Os2_Panose_LetterForm = 4
	Ttf_Os2_Panose_LetterForm__NormalFlattened Ttf_Os2_Panose_LetterForm = 5
	Ttf_Os2_Panose_LetterForm__NormalRounded Ttf_Os2_Panose_LetterForm = 6
	Ttf_Os2_Panose_LetterForm__NormalOffCenter Ttf_Os2_Panose_LetterForm = 7
	Ttf_Os2_Panose_LetterForm__NormalSquare Ttf_Os2_Panose_LetterForm = 8
	Ttf_Os2_Panose_LetterForm__ObliqueContact Ttf_Os2_Panose_LetterForm = 9
	Ttf_Os2_Panose_LetterForm__ObliqueWeighted Ttf_Os2_Panose_LetterForm = 10
	Ttf_Os2_Panose_LetterForm__ObliqueBoxed Ttf_Os2_Panose_LetterForm = 11
	Ttf_Os2_Panose_LetterForm__ObliqueFlattened Ttf_Os2_Panose_LetterForm = 12
	Ttf_Os2_Panose_LetterForm__ObliqueRounded Ttf_Os2_Panose_LetterForm = 13
	Ttf_Os2_Panose_LetterForm__ObliqueOffCenter Ttf_Os2_Panose_LetterForm = 14
	Ttf_Os2_Panose_LetterForm__ObliqueSquare Ttf_Os2_Panose_LetterForm = 15
)
var values_Ttf_Os2_Panose_LetterForm = map[Ttf_Os2_Panose_LetterForm]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {}, 12: {}, 13: {}, 14: {}, 15: {}}
func (v Ttf_Os2_Panose_LetterForm) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_LetterForm[v]
	return ok
}

type Ttf_Os2_Panose_Midline int
const (
	Ttf_Os2_Panose_Midline__Any Ttf_Os2_Panose_Midline = 0
	Ttf_Os2_Panose_Midline__NoFit Ttf_Os2_Panose_Midline = 1
	Ttf_Os2_Panose_Midline__StandardTrimmed Ttf_Os2_Panose_Midline = 2
	Ttf_Os2_Panose_Midline__StandardPointed Ttf_Os2_Panose_Midline = 3
	Ttf_Os2_Panose_Midline__StandardSerifed Ttf_Os2_Panose_Midline = 4
	Ttf_Os2_Panose_Midline__HighTrimmed Ttf_Os2_Panose_Midline = 5
	Ttf_Os2_Panose_Midline__HighPointed Ttf_Os2_Panose_Midline = 6
	Ttf_Os2_Panose_Midline__HighSerifed Ttf_Os2_Panose_Midline = 7
	Ttf_Os2_Panose_Midline__ConstantTrimmed Ttf_Os2_Panose_Midline = 8
	Ttf_Os2_Panose_Midline__ConstantPointed Ttf_Os2_Panose_Midline = 9
	Ttf_Os2_Panose_Midline__ConstantSerifed Ttf_Os2_Panose_Midline = 10
	Ttf_Os2_Panose_Midline__LowTrimmed Ttf_Os2_Panose_Midline = 11
	Ttf_Os2_Panose_Midline__LowPointed Ttf_Os2_Panose_Midline = 12
	Ttf_Os2_Panose_Midline__LowSerifed Ttf_Os2_Panose_Midline = 13
)
var values_Ttf_Os2_Panose_Midline = map[Ttf_Os2_Panose_Midline]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {}, 12: {}, 13: {}}
func (v Ttf_Os2_Panose_Midline) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_Midline[v]
	return ok
}

type Ttf_Os2_Panose_Proportion int
const (
	Ttf_Os2_Panose_Proportion__Any Ttf_Os2_Panose_Proportion = 0
	Ttf_Os2_Panose_Proportion__NoFit Ttf_Os2_Panose_Proportion = 1
	Ttf_Os2_Panose_Proportion__OldStyle Ttf_Os2_Panose_Proportion = 2
	Ttf_Os2_Panose_Proportion__Modern Ttf_Os2_Panose_Proportion = 3
	Ttf_Os2_Panose_Proportion__EvenWidth Ttf_Os2_Panose_Proportion = 4
	Ttf_Os2_Panose_Proportion__Expanded Ttf_Os2_Panose_Proportion = 5
	Ttf_Os2_Panose_Proportion__Condensed Ttf_Os2_Panose_Proportion = 6
	Ttf_Os2_Panose_Proportion__VeryExpanded Ttf_Os2_Panose_Proportion = 7
	Ttf_Os2_Panose_Proportion__VeryCondensed Ttf_Os2_Panose_Proportion = 8
	Ttf_Os2_Panose_Proportion__Monospaced Ttf_Os2_Panose_Proportion = 9
)
var values_Ttf_Os2_Panose_Proportion = map[Ttf_Os2_Panose_Proportion]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}}
func (v Ttf_Os2_Panose_Proportion) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_Proportion[v]
	return ok
}

type Ttf_Os2_Panose_SerifStyle int
const (
	Ttf_Os2_Panose_SerifStyle__Any Ttf_Os2_Panose_SerifStyle = 0
	Ttf_Os2_Panose_SerifStyle__NoFit Ttf_Os2_Panose_SerifStyle = 1
	Ttf_Os2_Panose_SerifStyle__Cove Ttf_Os2_Panose_SerifStyle = 2
	Ttf_Os2_Panose_SerifStyle__ObtuseCove Ttf_Os2_Panose_SerifStyle = 3
	Ttf_Os2_Panose_SerifStyle__SquareCove Ttf_Os2_Panose_SerifStyle = 4
	Ttf_Os2_Panose_SerifStyle__ObtuseSquareCove Ttf_Os2_Panose_SerifStyle = 5
	Ttf_Os2_Panose_SerifStyle__Square Ttf_Os2_Panose_SerifStyle = 6
	Ttf_Os2_Panose_SerifStyle__Thin Ttf_Os2_Panose_SerifStyle = 7
	Ttf_Os2_Panose_SerifStyle__Bone Ttf_Os2_Panose_SerifStyle = 8
	Ttf_Os2_Panose_SerifStyle__Exaggerated Ttf_Os2_Panose_SerifStyle = 9
	Ttf_Os2_Panose_SerifStyle__Triangle Ttf_Os2_Panose_SerifStyle = 10
	Ttf_Os2_Panose_SerifStyle__NormalSans Ttf_Os2_Panose_SerifStyle = 11
	Ttf_Os2_Panose_SerifStyle__ObtuseSans Ttf_Os2_Panose_SerifStyle = 12
	Ttf_Os2_Panose_SerifStyle__PerpSans Ttf_Os2_Panose_SerifStyle = 13
	Ttf_Os2_Panose_SerifStyle__Flared Ttf_Os2_Panose_SerifStyle = 14
	Ttf_Os2_Panose_SerifStyle__Rounded Ttf_Os2_Panose_SerifStyle = 15
)
var values_Ttf_Os2_Panose_SerifStyle = map[Ttf_Os2_Panose_SerifStyle]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {}, 12: {}, 13: {}, 14: {}, 15: {}}
func (v Ttf_Os2_Panose_SerifStyle) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_SerifStyle[v]
	return ok
}

type Ttf_Os2_Panose_StrokeVariation int
const (
	Ttf_Os2_Panose_StrokeVariation__Any Ttf_Os2_Panose_StrokeVariation = 0
	Ttf_Os2_Panose_StrokeVariation__NoFit Ttf_Os2_Panose_StrokeVariation = 1
	Ttf_Os2_Panose_StrokeVariation__GradualDiagonal Ttf_Os2_Panose_StrokeVariation = 2
	Ttf_Os2_Panose_StrokeVariation__GradualTransitional Ttf_Os2_Panose_StrokeVariation = 3
	Ttf_Os2_Panose_StrokeVariation__GradualVertical Ttf_Os2_Panose_StrokeVariation = 4
	Ttf_Os2_Panose_StrokeVariation__GradualHorizontal Ttf_Os2_Panose_StrokeVariation = 5
	Ttf_Os2_Panose_StrokeVariation__RapidVertical Ttf_Os2_Panose_StrokeVariation = 6
	Ttf_Os2_Panose_StrokeVariation__RapidHorizontal Ttf_Os2_Panose_StrokeVariation = 7
	Ttf_Os2_Panose_StrokeVariation__InstantVertical Ttf_Os2_Panose_StrokeVariation = 8
)
var values_Ttf_Os2_Panose_StrokeVariation = map[Ttf_Os2_Panose_StrokeVariation]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}}
func (v Ttf_Os2_Panose_StrokeVariation) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_StrokeVariation[v]
	return ok
}

type Ttf_Os2_Panose_Weight int
const (
	Ttf_Os2_Panose_Weight__Any Ttf_Os2_Panose_Weight = 0
	Ttf_Os2_Panose_Weight__NoFit Ttf_Os2_Panose_Weight = 1
	Ttf_Os2_Panose_Weight__VeryLight Ttf_Os2_Panose_Weight = 2
	Ttf_Os2_Panose_Weight__Light Ttf_Os2_Panose_Weight = 3
	Ttf_Os2_Panose_Weight__Thin Ttf_Os2_Panose_Weight = 4
	Ttf_Os2_Panose_Weight__Book Ttf_Os2_Panose_Weight = 5
	Ttf_Os2_Panose_Weight__Medium Ttf_Os2_Panose_Weight = 6
	Ttf_Os2_Panose_Weight__Demi Ttf_Os2_Panose_Weight = 7
	Ttf_Os2_Panose_Weight__Bold Ttf_Os2_Panose_Weight = 8
	Ttf_Os2_Panose_Weight__Heavy Ttf_Os2_Panose_Weight = 9
	Ttf_Os2_Panose_Weight__Black Ttf_Os2_Panose_Weight = 10
	Ttf_Os2_Panose_Weight__Nord Ttf_Os2_Panose_Weight = 11
)
var values_Ttf_Os2_Panose_Weight = map[Ttf_Os2_Panose_Weight]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {}}
func (v Ttf_Os2_Panose_Weight) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_Weight[v]
	return ok
}

type Ttf_Os2_Panose_XHeight int
const (
	Ttf_Os2_Panose_XHeight__Any Ttf_Os2_Panose_XHeight = 0
	Ttf_Os2_Panose_XHeight__NoFit Ttf_Os2_Panose_XHeight = 1
	Ttf_Os2_Panose_XHeight__ConstantSmall Ttf_Os2_Panose_XHeight = 2
	Ttf_Os2_Panose_XHeight__ConstantStandard Ttf_Os2_Panose_XHeight = 3
	Ttf_Os2_Panose_XHeight__ConstantLarge Ttf_Os2_Panose_XHeight = 4
	Ttf_Os2_Panose_XHeight__DuckingSmall Ttf_Os2_Panose_XHeight = 5
	Ttf_Os2_Panose_XHeight__DuckingStandard Ttf_Os2_Panose_XHeight = 6
	Ttf_Os2_Panose_XHeight__DuckingLarge Ttf_Os2_Panose_XHeight = 7
)
var values_Ttf_Os2_Panose_XHeight = map[Ttf_Os2_Panose_XHeight]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}}
func (v Ttf_Os2_Panose_XHeight) isDefined() bool {
	_, ok := values_Ttf_Os2_Panose_XHeight[v]
	return ok
}
type Ttf_Os2_Panose struct {
	FamilyType Ttf_Os2_Panose_FamilyKind
	SerifStyle Ttf_Os2_Panose_SerifStyle
	Weight Ttf_Os2_Panose_Weight
	Proportion Ttf_Os2_Panose_Proportion
	Contrast Ttf_Os2_Panose_Contrast
	StrokeVariation Ttf_Os2_Panose_StrokeVariation
	ArmStyle Ttf_Os2_Panose_ArmStyle
	LetterForm Ttf_Os2_Panose_LetterForm
	Midline Ttf_Os2_Panose_Midline
	XHeight Ttf_Os2_Panose_XHeight
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Os2
}
func NewTtf_Os2_Panose() *Ttf_Os2_Panose {
	return &Ttf_Os2_Panose{
	}
}

func (this Ttf_Os2_Panose) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Os2_Panose) Read(io *kaitai.Stream, parent *Ttf_Os2, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp246, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.FamilyType = Ttf_Os2_Panose_FamilyKind(tmp246)
	tmp247, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SerifStyle = Ttf_Os2_Panose_SerifStyle(tmp247)
	tmp248, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Weight = Ttf_Os2_Panose_Weight(tmp248)
	tmp249, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Proportion = Ttf_Os2_Panose_Proportion(tmp249)
	tmp250, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Contrast = Ttf_Os2_Panose_Contrast(tmp250)
	tmp251, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.StrokeVariation = Ttf_Os2_Panose_StrokeVariation(tmp251)
	tmp252, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ArmStyle = Ttf_Os2_Panose_ArmStyle(tmp252)
	tmp253, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.LetterForm = Ttf_Os2_Panose_LetterForm(tmp253)
	tmp254, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Midline = Ttf_Os2_Panose_Midline(tmp254)
	tmp255, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.XHeight = Ttf_Os2_Panose_XHeight(tmp255)
	return err
}
type Ttf_Os2_UnicodeRange struct {
	BasicLatin bool
	Latin1Supplement bool
	LatinExtendedA bool
	LatinExtendedB bool
	IpaExtensions bool
	SpacingModifierLetters bool
	CombiningDiacriticalMarks bool
	BasicGreek bool
	GreekSymbolsAndCoptic bool
	Cyrillic bool
	Armenian bool
	BasicHebrew bool
	HebrewExtended bool
	BasicArabic bool
	ArabicExtended bool
	Devanagari bool
	Bengali bool
	Gurmukhi bool
	Gujarati bool
	Oriya bool
	Tamil bool
	Telugu bool
	Kannada bool
	Malayalam bool
	Thai bool
	Lao bool
	BasicGeorgian bool
	GeorgianExtended bool
	HangulJamo bool
	LatinExtendedAdditional bool
	GreekExtended bool
	GeneralPunctuation bool
	SuperscriptsAndSubscripts bool
	CurrencySymbols bool
	CombiningDiacriticalMarksForSymbols bool
	LetterlikeSymbols bool
	NumberForms bool
	Arrows bool
	MathematicalOperators bool
	MiscellaneousTechnical bool
	ControlPictures bool
	OpticalCharacterRecognition bool
	EnclosedAlphanumerics bool
	BoxDrawing bool
	BlockElements bool
	GeometricShapes bool
	MiscellaneousSymbols bool
	Dingbats bool
	CjkSymbolsAndPunctuation bool
	Hiragana bool
	Katakana bool
	Bopomofo bool
	HangulCompatibilityJamo bool
	CjkMiscellaneous bool
	EnclosedCjkLettersAndMonths bool
	CjkCompatibility bool
	Hangul bool
	ReservedForUnicodeSubranges1 bool
	ReservedForUnicodeSubranges2 bool
	CjkUnifiedIdeographs bool
	PrivateUseArea bool
	CjkCompatibilityIdeographs bool
	AlphabeticPresentationForms bool
	ArabicPresentationFormsA bool
	CombiningHalfMarks bool
	CjkCompatibilityForms bool
	SmallFormVariants bool
	ArabicPresentationFormsB bool
	HalfwidthAndFullwidthForms bool
	Specials bool
	Reserved []byte
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Os2
}
func NewTtf_Os2_UnicodeRange() *Ttf_Os2_UnicodeRange {
	return &Ttf_Os2_UnicodeRange{
	}
}

func (this Ttf_Os2_UnicodeRange) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Os2_UnicodeRange) Read(io *kaitai.Stream, parent *Ttf_Os2, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp256, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.BasicLatin = tmp256 != 0
	tmp257, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Latin1Supplement = tmp257 != 0
	tmp258, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.LatinExtendedA = tmp258 != 0
	tmp259, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.LatinExtendedB = tmp259 != 0
	tmp260, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.IpaExtensions = tmp260 != 0
	tmp261, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.SpacingModifierLetters = tmp261 != 0
	tmp262, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CombiningDiacriticalMarks = tmp262 != 0
	tmp263, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.BasicGreek = tmp263 != 0
	tmp264, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.GreekSymbolsAndCoptic = tmp264 != 0
	tmp265, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Cyrillic = tmp265 != 0
	tmp266, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Armenian = tmp266 != 0
	tmp267, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.BasicHebrew = tmp267 != 0
	tmp268, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.HebrewExtended = tmp268 != 0
	tmp269, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.BasicArabic = tmp269 != 0
	tmp270, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.ArabicExtended = tmp270 != 0
	tmp271, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Devanagari = tmp271 != 0
	tmp272, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Bengali = tmp272 != 0
	tmp273, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Gurmukhi = tmp273 != 0
	tmp274, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Gujarati = tmp274 != 0
	tmp275, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Oriya = tmp275 != 0
	tmp276, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Tamil = tmp276 != 0
	tmp277, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Telugu = tmp277 != 0
	tmp278, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Kannada = tmp278 != 0
	tmp279, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Malayalam = tmp279 != 0
	tmp280, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Thai = tmp280 != 0
	tmp281, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Lao = tmp281 != 0
	tmp282, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.BasicGeorgian = tmp282 != 0
	tmp283, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.GeorgianExtended = tmp283 != 0
	tmp284, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.HangulJamo = tmp284 != 0
	tmp285, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.LatinExtendedAdditional = tmp285 != 0
	tmp286, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.GreekExtended = tmp286 != 0
	tmp287, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.GeneralPunctuation = tmp287 != 0
	tmp288, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.SuperscriptsAndSubscripts = tmp288 != 0
	tmp289, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CurrencySymbols = tmp289 != 0
	tmp290, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CombiningDiacriticalMarksForSymbols = tmp290 != 0
	tmp291, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.LetterlikeSymbols = tmp291 != 0
	tmp292, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.NumberForms = tmp292 != 0
	tmp293, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Arrows = tmp293 != 0
	tmp294, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.MathematicalOperators = tmp294 != 0
	tmp295, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.MiscellaneousTechnical = tmp295 != 0
	tmp296, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.ControlPictures = tmp296 != 0
	tmp297, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.OpticalCharacterRecognition = tmp297 != 0
	tmp298, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.EnclosedAlphanumerics = tmp298 != 0
	tmp299, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.BoxDrawing = tmp299 != 0
	tmp300, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.BlockElements = tmp300 != 0
	tmp301, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.GeometricShapes = tmp301 != 0
	tmp302, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.MiscellaneousSymbols = tmp302 != 0
	tmp303, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Dingbats = tmp303 != 0
	tmp304, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CjkSymbolsAndPunctuation = tmp304 != 0
	tmp305, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Hiragana = tmp305 != 0
	tmp306, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Katakana = tmp306 != 0
	tmp307, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Bopomofo = tmp307 != 0
	tmp308, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.HangulCompatibilityJamo = tmp308 != 0
	tmp309, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CjkMiscellaneous = tmp309 != 0
	tmp310, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.EnclosedCjkLettersAndMonths = tmp310 != 0
	tmp311, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CjkCompatibility = tmp311 != 0
	tmp312, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Hangul = tmp312 != 0
	tmp313, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.ReservedForUnicodeSubranges1 = tmp313 != 0
	tmp314, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.ReservedForUnicodeSubranges2 = tmp314 != 0
	tmp315, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CjkUnifiedIdeographs = tmp315 != 0
	tmp316, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.PrivateUseArea = tmp316 != 0
	tmp317, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CjkCompatibilityIdeographs = tmp317 != 0
	tmp318, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.AlphabeticPresentationForms = tmp318 != 0
	tmp319, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.ArabicPresentationFormsA = tmp319 != 0
	tmp320, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CombiningHalfMarks = tmp320 != 0
	tmp321, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.CjkCompatibilityForms = tmp321 != 0
	tmp322, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.SmallFormVariants = tmp322 != 0
	tmp323, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.ArabicPresentationFormsB = tmp323 != 0
	tmp324, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.HalfwidthAndFullwidthForms = tmp324 != 0
	tmp325, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.Specials = tmp325 != 0
	this._io.AlignToByte()
	tmp326, err := this._io.ReadBytes(int(7))
	if err != nil {
		return err
	}
	tmp326 = tmp326
	this.Reserved = tmp326
	return err
}
type Ttf_Post struct {
	Format *Ttf_Fixed
	ItalicAngle *Ttf_Fixed
	UnderlinePosition int16
	UnderlineThichness int16
	IsFixedPitch uint32
	MinMemType42 uint32
	MaxMemType42 uint32
	MinMemType1 uint32
	MaxMemType1 uint32
	Format20 *Ttf_Post_Format20
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Post() *Ttf_Post {
	return &Ttf_Post{
	}
}

func (this Ttf_Post) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Post) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp327 := NewTtf_Fixed()
	err = tmp327.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Format = tmp327
	tmp328 := NewTtf_Fixed()
	err = tmp328.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ItalicAngle = tmp328
	tmp329, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.UnderlinePosition = int16(tmp329)
	tmp330, err := this._io.ReadS2be()
	if err != nil {
		return err
	}
	this.UnderlineThichness = int16(tmp330)
	tmp331, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.IsFixedPitch = uint32(tmp331)
	tmp332, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.MinMemType42 = uint32(tmp332)
	tmp333, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.MaxMemType42 = uint32(tmp333)
	tmp334, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.MinMemType1 = uint32(tmp334)
	tmp335, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.MaxMemType1 = uint32(tmp335)
	if ( ((this.Format.Major == 2) && (this.Format.Minor == 0)) ) {
		tmp336 := NewTtf_Post_Format20()
		err = tmp336.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Format20 = tmp336
	}
	return err
}
type Ttf_Post_Format20 struct {
	NumberOfGlyphs uint16
	GlyphNameIndex []uint16
	GlyphNames []*Ttf_Post_Format20_PascalString
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Post
}
func NewTtf_Post_Format20() *Ttf_Post_Format20 {
	return &Ttf_Post_Format20{
	}
}

func (this Ttf_Post_Format20) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Post_Format20) Read(io *kaitai.Stream, parent *Ttf_Post, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp337, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.NumberOfGlyphs = uint16(tmp337)
	for i := 0; i < int(this.NumberOfGlyphs); i++ {
		_ = i
		tmp338, err := this._io.ReadU2be()
		if err != nil {
			return err
		}
		this.GlyphNameIndex = append(this.GlyphNameIndex, tmp338)
	}
	for i := 1;; i++ {
		tmp339 := NewTtf_Post_Format20_PascalString()
		err = tmp339.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		_it := tmp339
		this.GlyphNames = append(this.GlyphNames, _it)
		tmp340, err := this._io.EOF()
		if err != nil {
			return err
		}
		if  ((_it.Length == 0) || (tmp340))  {
			break
		}
	}
	return err
}
type Ttf_Post_Format20_PascalString struct {
	Length uint8
	Value string
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_Post_Format20
}
func NewTtf_Post_Format20_PascalString() *Ttf_Post_Format20_PascalString {
	return &Ttf_Post_Format20_PascalString{
	}
}

func (this Ttf_Post_Format20_PascalString) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Post_Format20_PascalString) Read(io *kaitai.Stream, parent *Ttf_Post_Format20, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp341, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Length = tmp341
	if (this.Length != 0) {
		tmp342, err := this._io.ReadBytes(int(this.Length))
		if err != nil {
			return err
		}
		tmp342 = tmp342
		this.Value = string(tmp342)
	}
	return err
}
type Ttf_Prep struct {
	Instructions []byte
	_io *kaitai.Stream
	_root *Ttf
	_parent *Ttf_DirTableEntry
}
func NewTtf_Prep() *Ttf_Prep {
	return &Ttf_Prep{
	}
}

func (this Ttf_Prep) IO_() *kaitai.Stream {
	return this._io
}

func (this *Ttf_Prep) Read(io *kaitai.Stream, parent *Ttf_DirTableEntry, root *Ttf) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp343, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp343 = tmp343
	this.Instructions = tmp343
	return err
}
