digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__vlq_base128_le {
		label="VlqBase128Le";
		graph[style=dotted];

		vlq_base128_le__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="groups_pos">0</TD><TD PORT="groups_size">...</TD><TD>Group</TD><TD PORT="groups_type">groups</TD></TR>
			<TR><TD COLSPAN="4" PORT="groups__repeat">repeat until !(_.has_next)</TD></TR>
		</TABLE>>];
		vlq_base128_le__inst__len [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
			<TR><TD>len</TD><TD>groups.length</TD></TR>
		</TABLE>>];
		vlq_base128_le__inst__value [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
			<TR><TD>value</TD><TD>(((((((groups[0].value + (len &gt;= 2 ? (groups[1].value &lt;&lt; 7) : 0)) + (len &gt;= 3 ? (groups[2].value &lt;&lt; 14) : 0)) + (len &gt;= 4 ? (groups[3].value &lt;&lt; 21) : 0)) + (len &gt;= 5 ? (groups[4].value &lt;&lt; 28) : 0)) + (len &gt;= 6 ? (groups[5].value &lt;&lt; 35) : 0)) + (len &gt;= 7 ? (groups[6].value &lt;&lt; 42) : 0)) + (len &gt;= 8 ? (groups[7].value &lt;&lt; 49) : 0))</TD></TR>
		</TABLE>>];
		subgraph cluster__group {
			label="VlqBase128Le::Group";
			graph[style=dotted];

			group__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="b_pos">0</TD><TD PORT="b_size">1</TD><TD>u1</TD><TD PORT="b_type">b</TD></TR>
			</TABLE>>];
			group__inst__has_next [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>has_next</TD><TD>(b &amp; 128) != 0</TD></TR>
			</TABLE>>];
			group__inst__value [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>value</TD><TD>(b &amp; 127)</TD></TR>
			</TABLE>>];
		}
	}
	vlq_base128_le__seq:groups_type -> group__seq [style=bold];
	group__inst__has_next:has_next_type -> vlq_base128_le__seq:groups__repeat [color="#404040"];
	vlq_base128_le__seq:groups_type -> vlq_base128_le__inst__len [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	vlq_base128_le__inst__len:len_type -> vlq_base128_le__inst__value [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	vlq_base128_le__inst__len:len_type -> vlq_base128_le__inst__value [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	vlq_base128_le__inst__len:len_type -> vlq_base128_le__inst__value [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	vlq_base128_le__inst__len:len_type -> vlq_base128_le__inst__value [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	vlq_base128_le__inst__len:len_type -> vlq_base128_le__inst__value [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	vlq_base128_le__inst__len:len_type -> vlq_base128_le__inst__value [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	vlq_base128_le__inst__len:len_type -> vlq_base128_le__inst__value [color="#404040"];
	group__inst__value:value_type -> vlq_base128_le__inst__value [color="#404040"];
	group__seq:b_type -> group__inst__has_next [color="#404040"];
	group__seq:b_type -> group__inst__value [color="#404040"];
}
