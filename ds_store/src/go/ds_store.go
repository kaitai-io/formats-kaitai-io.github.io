// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
	"golang.org/x/text/encoding/unicode"
)


/**
 * Apple macOS '.DS_Store' file format.
 * @see <a href="https://en.wikipedia.org/wiki/.DS_Store
 * https://metacpan.org/pod/distribution/Mac-Finder-DSStore/DSStoreFormat.pod
 * https://0day.work/parsing-the-ds_store-file-format
 * ">Source</a>
 */
type DsStore struct {
	AlignmentHeader []byte
	BuddyAllocatorHeader *DsStore_BuddyAllocatorHeader
	_io *kaitai.Stream
	_root *DsStore
	_parent interface{}
	_raw_buddyAllocatorBody []byte
	_f_buddyAllocatorBody bool
	buddyAllocatorBody *DsStore_BuddyAllocatorBody
	_f_blockAddressMask bool
	blockAddressMask int8
}
func NewDsStore() *DsStore {
	return &DsStore{
	}
}

func (this *DsStore) Read(io *kaitai.Stream, parent interface{}, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.AlignmentHeader = tmp1
	if !(bytes.Equal(this.AlignmentHeader, []uint8{0, 0, 0, 1})) {
		return kaitai.NewValidationNotEqualError([]uint8{0, 0, 0, 1}, this.AlignmentHeader, this._io, "/seq/0")
	}
	tmp2 := NewDsStore_BuddyAllocatorHeader()
	err = tmp2.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.BuddyAllocatorHeader = tmp2
	return err
}
func (this *DsStore) BuddyAllocatorBody() (v *DsStore_BuddyAllocatorBody, err error) {
	if (this._f_buddyAllocatorBody) {
		return this.buddyAllocatorBody, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64((this.BuddyAllocatorHeader.OfsBookkeepingInfoBlock + 4)), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp3, err := this._io.ReadBytes(int(this.BuddyAllocatorHeader.LenBookkeepingInfoBlock))
	if err != nil {
		return nil, err
	}
	tmp3 = tmp3
	this._raw_buddyAllocatorBody = tmp3
	_io__raw_buddyAllocatorBody := kaitai.NewStream(bytes.NewReader(this._raw_buddyAllocatorBody))
	tmp4 := NewDsStore_BuddyAllocatorBody()
	err = tmp4.Read(_io__raw_buddyAllocatorBody, this, this._root)
	if err != nil {
		return nil, err
	}
	this.buddyAllocatorBody = tmp4
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_buddyAllocatorBody = true
	this._f_buddyAllocatorBody = true
	return this.buddyAllocatorBody, nil
}

/**
 * Bitmask used to calculate the position and the size of each block
 * of the B-tree from the block addresses.
 */
func (this *DsStore) BlockAddressMask() (v int8, err error) {
	if (this._f_blockAddressMask) {
		return this.blockAddressMask, nil
	}
	this.blockAddressMask = int8(31)
	this._f_blockAddressMask = true
	return this.blockAddressMask, nil
}
type DsStore_BuddyAllocatorHeader struct {
	Magic []byte
	OfsBookkeepingInfoBlock uint32
	LenBookkeepingInfoBlock uint32
	CopyOfsBookkeepingInfoBlock uint32
	_unnamed4 []byte
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore
}
func NewDsStore_BuddyAllocatorHeader() *DsStore_BuddyAllocatorHeader {
	return &DsStore_BuddyAllocatorHeader{
	}
}

func (this *DsStore_BuddyAllocatorHeader) Read(io *kaitai.Stream, parent *DsStore, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp5, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp5 = tmp5
	this.Magic = tmp5
	if !(bytes.Equal(this.Magic, []uint8{66, 117, 100, 49})) {
		return kaitai.NewValidationNotEqualError([]uint8{66, 117, 100, 49}, this.Magic, this._io, "/types/buddy_allocator_header/seq/0")
	}
	tmp6, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.OfsBookkeepingInfoBlock = uint32(tmp6)
	tmp7, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.LenBookkeepingInfoBlock = uint32(tmp7)
	tmp8, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.CopyOfsBookkeepingInfoBlock = uint32(tmp8)
	tmp9, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp9 = tmp9
	this._unnamed4 = tmp9
	return err
}

/**
 * Magic number 'Bud1'.
 */

/**
 * Needs to match 'offset_bookkeeping_info_block'.
 */

/**
 * Unused field which might simply be the unused space at the end of the block,
 * since the minimum allocation size is 32 bytes.
 */
type DsStore_BuddyAllocatorBody struct {
	NumBlocks uint32
	_unnamed1 []byte
	BlockAddresses []*DsStore_BuddyAllocatorBody_BlockDescriptor
	NumDirectories uint32
	DirectoryEntries []*DsStore_BuddyAllocatorBody_DirectoryEntry
	FreeLists []*DsStore_BuddyAllocatorBody_FreeList
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore
	_f_numBlockAddresses bool
	numBlockAddresses int
	_f_numFreeLists bool
	numFreeLists int8
	_f_directories bool
	directories []*DsStore_MasterBlockRef
}
func NewDsStore_BuddyAllocatorBody() *DsStore_BuddyAllocatorBody {
	return &DsStore_BuddyAllocatorBody{
	}
}

func (this *DsStore_BuddyAllocatorBody) Read(io *kaitai.Stream, parent *DsStore, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.NumBlocks = uint32(tmp10)
	tmp11, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp11 = tmp11
	this._unnamed1 = tmp11
	tmp12, err := this.NumBlockAddresses()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp12); i++ {
		_ = i
		tmp13 := NewDsStore_BuddyAllocatorBody_BlockDescriptor()
		err = tmp13.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.BlockAddresses = append(this.BlockAddresses, tmp13)
	}
	tmp14, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.NumDirectories = uint32(tmp14)
	for i := 0; i < int(this.NumDirectories); i++ {
		_ = i
		tmp15 := NewDsStore_BuddyAllocatorBody_DirectoryEntry()
		err = tmp15.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.DirectoryEntries = append(this.DirectoryEntries, tmp15)
	}
	tmp16, err := this.NumFreeLists()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp16); i++ {
		_ = i
		tmp17 := NewDsStore_BuddyAllocatorBody_FreeList()
		err = tmp17.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FreeLists = append(this.FreeLists, tmp17)
	}
	return err
}
func (this *DsStore_BuddyAllocatorBody) NumBlockAddresses() (v int, err error) {
	if (this._f_numBlockAddresses) {
		return this.numBlockAddresses, nil
	}
	this.numBlockAddresses = int(256)
	this._f_numBlockAddresses = true
	return this.numBlockAddresses, nil
}
func (this *DsStore_BuddyAllocatorBody) NumFreeLists() (v int8, err error) {
	if (this._f_numFreeLists) {
		return this.numFreeLists, nil
	}
	this.numFreeLists = int8(32)
	this._f_numFreeLists = true
	return this.numFreeLists, nil
}

/**
 * Master blocks of the different B-trees.
 */
func (this *DsStore_BuddyAllocatorBody) Directories() (v []*DsStore_MasterBlockRef, err error) {
	if (this._f_directories) {
		return this.directories, nil
	}
	thisIo := this._root._io
	for i := 0; i < int(this.NumDirectories); i++ {
		_ = i
		tmp18 := NewDsStore_MasterBlockRef(i)
		err = tmp18.Read(thisIo, this, this._root)
		if err != nil {
			return nil, err
		}
		this.directories = append(this.directories, tmp18)
	}
	this._f_directories = true
	this._f_directories = true
	return this.directories, nil
}

/**
 * Number of blocks in the allocated-blocks list.
 */

/**
 * Unknown field which appears to always be 0.
 */

/**
 * Addresses of the different blocks.
 */

/**
 * Indicates the number of directory entries.
 */

/**
 * Each directory is an independent B-tree.
 */
type DsStore_BuddyAllocatorBody_BlockDescriptor struct {
	AddressRaw uint32
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_BuddyAllocatorBody
	_f_offset bool
	offset int
	_f_size bool
	size int
}
func NewDsStore_BuddyAllocatorBody_BlockDescriptor() *DsStore_BuddyAllocatorBody_BlockDescriptor {
	return &DsStore_BuddyAllocatorBody_BlockDescriptor{
	}
}

func (this *DsStore_BuddyAllocatorBody_BlockDescriptor) Read(io *kaitai.Stream, parent *DsStore_BuddyAllocatorBody, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp19, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.AddressRaw = uint32(tmp19)
	return err
}
func (this *DsStore_BuddyAllocatorBody_BlockDescriptor) Offset() (v int, err error) {
	if (this._f_offset) {
		return this.offset, nil
	}
	tmp20, err := this._root.BlockAddressMask()
	if err != nil {
		return 0, err
	}
	this.offset = int(((this.AddressRaw & ^(tmp20)) + 4))
	this._f_offset = true
	return this.offset, nil
}
func (this *DsStore_BuddyAllocatorBody_BlockDescriptor) Size() (v int, err error) {
	if (this._f_size) {
		return this.size, nil
	}
	tmp21, err := this._root.BlockAddressMask()
	if err != nil {
		return 0, err
	}
	this.size = int(((1 << this.AddressRaw) & tmp21))
	this._f_size = true
	return this.size, nil
}
type DsStore_BuddyAllocatorBody_DirectoryEntry struct {
	LenName uint8
	Name string
	BlockId uint32
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_BuddyAllocatorBody
}
func NewDsStore_BuddyAllocatorBody_DirectoryEntry() *DsStore_BuddyAllocatorBody_DirectoryEntry {
	return &DsStore_BuddyAllocatorBody_DirectoryEntry{
	}
}

func (this *DsStore_BuddyAllocatorBody_DirectoryEntry) Read(io *kaitai.Stream, parent *DsStore_BuddyAllocatorBody, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.LenName = tmp22
	tmp23, err := this._io.ReadBytes(int(this.LenName))
	if err != nil {
		return err
	}
	tmp23 = tmp23
	this.Name = string(tmp23)
	tmp24, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.BlockId = uint32(tmp24)
	return err
}
type DsStore_BuddyAllocatorBody_FreeList struct {
	Counter uint32
	Offsets []uint32
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_BuddyAllocatorBody
}
func NewDsStore_BuddyAllocatorBody_FreeList() *DsStore_BuddyAllocatorBody_FreeList {
	return &DsStore_BuddyAllocatorBody_FreeList{
	}
}

func (this *DsStore_BuddyAllocatorBody_FreeList) Read(io *kaitai.Stream, parent *DsStore_BuddyAllocatorBody, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp25, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Counter = uint32(tmp25)
	for i := 0; i < int(this.Counter); i++ {
		_ = i
		tmp26, err := this._io.ReadU4be()
		if err != nil {
			return err
		}
		this.Offsets = append(this.Offsets, tmp26)
	}
	return err
}
type DsStore_MasterBlockRef struct {
	Idx uint64
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_BuddyAllocatorBody
	_raw_masterBlock []byte
	_f_masterBlock bool
	masterBlock *DsStore_MasterBlockRef_MasterBlock
}
func NewDsStore_MasterBlockRef(idx uint64) *DsStore_MasterBlockRef {
	return &DsStore_MasterBlockRef{
		Idx: idx,
	}
}

func (this *DsStore_MasterBlockRef) Read(io *kaitai.Stream, parent *DsStore_BuddyAllocatorBody, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
func (this *DsStore_MasterBlockRef) MasterBlock() (v *DsStore_MasterBlockRef_MasterBlock, err error) {
	if (this._f_masterBlock) {
		return this.masterBlock, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	tmp27, err := this._parent.BlockAddresses[this._parent.DirectoryEntries[this.Idx].BlockId].Offset()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(tmp27), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp28, err := this._parent.BlockAddresses[this._parent.DirectoryEntries[this.Idx].BlockId].Size()
	if err != nil {
		return nil, err
	}
	tmp29, err := this._io.ReadBytes(int(tmp28))
	if err != nil {
		return nil, err
	}
	tmp29 = tmp29
	this._raw_masterBlock = tmp29
	_io__raw_masterBlock := kaitai.NewStream(bytes.NewReader(this._raw_masterBlock))
	tmp30 := NewDsStore_MasterBlockRef_MasterBlock()
	err = tmp30.Read(_io__raw_masterBlock, this, this._root)
	if err != nil {
		return nil, err
	}
	this.masterBlock = tmp30
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_masterBlock = true
	this._f_masterBlock = true
	return this.masterBlock, nil
}
type DsStore_MasterBlockRef_MasterBlock struct {
	BlockId uint32
	NumInternalNodes uint32
	NumRecords uint32
	NumNodes uint32
	_unnamed4 uint32
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_MasterBlockRef
	_f_rootBlock bool
	rootBlock *DsStore_Block
}
func NewDsStore_MasterBlockRef_MasterBlock() *DsStore_MasterBlockRef_MasterBlock {
	return &DsStore_MasterBlockRef_MasterBlock{
	}
}

func (this *DsStore_MasterBlockRef_MasterBlock) Read(io *kaitai.Stream, parent *DsStore_MasterBlockRef, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp31, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.BlockId = uint32(tmp31)
	tmp32, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.NumInternalNodes = uint32(tmp32)
	tmp33, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.NumRecords = uint32(tmp33)
	tmp34, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.NumNodes = uint32(tmp34)
	tmp35, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this._unnamed4 = tmp35
	return err
}
func (this *DsStore_MasterBlockRef_MasterBlock) RootBlock() (v *DsStore_Block, err error) {
	if (this._f_rootBlock) {
		return this.rootBlock, nil
	}
	thisIo := this._root._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return nil, err
	}
	tmp36, err := this._root.BuddyAllocatorBody()
	if err != nil {
		return nil, err
	}
	tmp37, err := tmp36.BlockAddresses[this.BlockId].Offset()
	if err != nil {
		return nil, err
	}
	_, err = thisIo.Seek(int64(tmp37), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp38 := NewDsStore_Block()
	err = tmp38.Read(thisIo, this, this._root)
	if err != nil {
		return nil, err
	}
	this.rootBlock = tmp38
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_rootBlock = true
	this._f_rootBlock = true
	return this.rootBlock, nil
}

/**
 * Block number of the B-tree's root node.
 */

/**
 * Number of internal node levels.
 */

/**
 * Number of records in the tree.
 */

/**
 * Number of nodes in the tree.
 */

/**
 * Always 0x1000, probably the B-tree node page size.
 */
type DsStore_Block struct {
	Mode uint32
	Counter uint32
	Data []*DsStore_Block_BlockData
	_io *kaitai.Stream
	_root *DsStore
	_parent interface{}
	_f_rightmostBlock bool
	rightmostBlock *DsStore_Block
}
func NewDsStore_Block() *DsStore_Block {
	return &DsStore_Block{
	}
}

func (this *DsStore_Block) Read(io *kaitai.Stream, parent interface{}, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp39, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Mode = uint32(tmp39)
	tmp40, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Counter = uint32(tmp40)
	for i := 0; i < int(this.Counter); i++ {
		_ = i
		tmp41 := NewDsStore_Block_BlockData(this.Mode)
		err = tmp41.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Data = append(this.Data, tmp41)
	}
	return err
}

/**
 * Rightmost child block pointer.
 */
func (this *DsStore_Block) RightmostBlock() (v *DsStore_Block, err error) {
	if (this._f_rightmostBlock) {
		return this.rightmostBlock, nil
	}
	if (this.Mode > 0) {
		thisIo := this._root._io
		_pos, err := thisIo.Pos()
		if err != nil {
			return nil, err
		}
		tmp42, err := this._root.BuddyAllocatorBody()
		if err != nil {
			return nil, err
		}
		tmp43, err := tmp42.BlockAddresses[this.Mode].Offset()
		if err != nil {
			return nil, err
		}
		_, err = thisIo.Seek(int64(tmp43), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp44 := NewDsStore_Block()
		err = tmp44.Read(thisIo, this, this._root)
		if err != nil {
			return nil, err
		}
		this.rightmostBlock = tmp44
		_, err = thisIo.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_rightmostBlock = true
	}
	this._f_rightmostBlock = true
	return this.rightmostBlock, nil
}

/**
 * If mode is 0, this is a leaf node, otherwise it is an internal node.
 */

/**
 * Number of records or number of block id + record pairs.
 */
type DsStore_Block_BlockData struct {
	BlockId uint32
	Record *DsStore_Block_BlockData_Record
	Mode uint32
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_Block
	_f_block bool
	block *DsStore_Block
}
func NewDsStore_Block_BlockData(mode uint32) *DsStore_Block_BlockData {
	return &DsStore_Block_BlockData{
		Mode: mode,
	}
}

func (this *DsStore_Block_BlockData) Read(io *kaitai.Stream, parent *DsStore_Block, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	if (this.Mode > 0) {
		tmp45, err := this._io.ReadU4be()
		if err != nil {
			return err
		}
		this.BlockId = uint32(tmp45)
	}
	tmp46 := NewDsStore_Block_BlockData_Record()
	err = tmp46.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Record = tmp46
	return err
}
func (this *DsStore_Block_BlockData) Block() (v *DsStore_Block, err error) {
	if (this._f_block) {
		return this.block, nil
	}
	if (this.Mode > 0) {
		thisIo := this._root._io
		_pos, err := thisIo.Pos()
		if err != nil {
			return nil, err
		}
		tmp47, err := this._root.BuddyAllocatorBody()
		if err != nil {
			return nil, err
		}
		tmp48, err := tmp47.BlockAddresses[this.BlockId].Offset()
		if err != nil {
			return nil, err
		}
		_, err = thisIo.Seek(int64(tmp48), io.SeekStart)
		if err != nil {
			return nil, err
		}
		tmp49 := NewDsStore_Block()
		err = tmp49.Read(thisIo, this, this._root)
		if err != nil {
			return nil, err
		}
		this.block = tmp49
		_, err = thisIo.Seek(_pos, io.SeekStart)
		if err != nil {
			return nil, err
		}
		this._f_block = true
	}
	this._f_block = true
	return this.block, nil
}
type DsStore_Block_BlockData_Record struct {
	Filename *DsStore_Block_BlockData_Record_Ustr
	StructureType *DsStore_Block_BlockData_Record_FourCharCode
	DataType string
	Value interface{}
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_Block_BlockData
}
func NewDsStore_Block_BlockData_Record() *DsStore_Block_BlockData_Record {
	return &DsStore_Block_BlockData_Record{
	}
}

func (this *DsStore_Block_BlockData_Record) Read(io *kaitai.Stream, parent *DsStore_Block_BlockData, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp50 := NewDsStore_Block_BlockData_Record_Ustr()
	err = tmp50.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Filename = tmp50
	tmp51 := NewDsStore_Block_BlockData_Record_FourCharCode()
	err = tmp51.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.StructureType = tmp51
	tmp52, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp52 = tmp52
	this.DataType = string(tmp52)
	switch (this.DataType) {
	case "long":
		tmp53, err := this._io.ReadU4be()
		if err != nil {
			return err
		}
		this.Value = tmp53
	case "shor":
		tmp54, err := this._io.ReadU4be()
		if err != nil {
			return err
		}
		this.Value = tmp54
	case "comp":
		tmp55, err := this._io.ReadU8be()
		if err != nil {
			return err
		}
		this.Value = tmp55
	case "bool":
		tmp56, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Value = tmp56
	case "ustr":
		tmp57 := NewDsStore_Block_BlockData_Record_Ustr()
		err = tmp57.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp57
	case "dutc":
		tmp58, err := this._io.ReadU8be()
		if err != nil {
			return err
		}
		this.Value = tmp58
	case "type":
		tmp59 := NewDsStore_Block_BlockData_Record_FourCharCode()
		err = tmp59.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp59
	case "blob":
		tmp60 := NewDsStore_Block_BlockData_Record_RecordBlob()
		err = tmp60.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Value = tmp60
	}
	return err
}

/**
 * Description of the entry's property.
 */

/**
 * Data type of the value.
 */
type DsStore_Block_BlockData_Record_RecordBlob struct {
	Length uint32
	Value []byte
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_Block_BlockData_Record
}
func NewDsStore_Block_BlockData_Record_RecordBlob() *DsStore_Block_BlockData_Record_RecordBlob {
	return &DsStore_Block_BlockData_Record_RecordBlob{
	}
}

func (this *DsStore_Block_BlockData_Record_RecordBlob) Read(io *kaitai.Stream, parent *DsStore_Block_BlockData_Record, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp61, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Length = uint32(tmp61)
	tmp62, err := this._io.ReadBytes(int(this.Length))
	if err != nil {
		return err
	}
	tmp62 = tmp62
	this.Value = tmp62
	return err
}
type DsStore_Block_BlockData_Record_Ustr struct {
	Length uint32
	Value string
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_Block_BlockData_Record
}
func NewDsStore_Block_BlockData_Record_Ustr() *DsStore_Block_BlockData_Record_Ustr {
	return &DsStore_Block_BlockData_Record_Ustr{
	}
}

func (this *DsStore_Block_BlockData_Record_Ustr) Read(io *kaitai.Stream, parent *DsStore_Block_BlockData_Record, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp63, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Length = uint32(tmp63)
	tmp64, err := this._io.ReadBytes(int((2 * this.Length)))
	if err != nil {
		return err
	}
	tmp64 = tmp64
	tmp65, err := kaitai.BytesToStr(tmp64, unicode.UTF16(unicode.BigEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.Value = tmp65
	return err
}
type DsStore_Block_BlockData_Record_FourCharCode struct {
	Value string
	_io *kaitai.Stream
	_root *DsStore
	_parent *DsStore_Block_BlockData_Record
}
func NewDsStore_Block_BlockData_Record_FourCharCode() *DsStore_Block_BlockData_Record_FourCharCode {
	return &DsStore_Block_BlockData_Record_FourCharCode{
	}
}

func (this *DsStore_Block_BlockData_Record_FourCharCode) Read(io *kaitai.Stream, parent *DsStore_Block_BlockData_Record, root *DsStore) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp66, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp66 = tmp66
	this.Value = string(tmp66)
	return err
}
