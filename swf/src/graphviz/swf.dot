digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__swf {
		label="Swf";
		graph[style=dotted];

		swf__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="junk_pos">0</TD><TD PORT="junk_size">4</TD><TD></TD><TD PORT="junk_type">junk</TD></TR>
			<TR><TD PORT="file_size_pos">4</TD><TD PORT="file_size_size">4</TD><TD>u4le</TD><TD PORT="file_size_type">file_size</TD></TR>
			<TR><TD PORT="body_pos">8</TD><TD PORT="body_size">⇲</TD><TD>SwfBody</TD><TD PORT="body_type">body</TD></TR>
		</TABLE>>];
		subgraph cluster__swf_body {
			label="Swf::SwfBody";
			graph[style=dotted];

			swf_body__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="rect_pos">0</TD><TD PORT="rect_size">...</TD><TD>Rect</TD><TD PORT="rect_type">rect</TD></TR>
				<TR><TD PORT="frame_rate_pos">...</TD><TD PORT="frame_rate_size">2</TD><TD>u2le</TD><TD PORT="frame_rate_type">frame_rate</TD></TR>
				<TR><TD PORT="frame_count_pos">...</TD><TD PORT="frame_count_size">2</TD><TD>u2le</TD><TD PORT="frame_count_type">frame_count</TD></TR>
				<TR><TD PORT="tags_pos">...</TD><TD PORT="tags_size">...</TD><TD>Tag</TD><TD PORT="tags_type">tags</TD></TR>
				<TR><TD COLSPAN="4" PORT="tags__repeat">repeat to end of stream</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__rect {
			label="Swf::Rect";
			graph[style=dotted];

			rect__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="b1_pos">0</TD><TD PORT="b1_size">1</TD><TD>u1</TD><TD PORT="b1_type">b1</TD></TR>
				<TR><TD PORT="skip_pos">1</TD><TD PORT="skip_size">num_bytes</TD><TD></TD><TD PORT="skip_type">skip</TD></TR>
			</TABLE>>];
			rect__inst__num_bits [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>num_bits</TD><TD>(b1 &gt;&gt; 3)</TD></TR>
			</TABLE>>];
			rect__inst__num_bytes [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>num_bytes</TD><TD>((((num_bits * 4) - 3) + 7) / 8)</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__tag {
			label="Swf::Tag";
			graph[style=dotted];

			tag__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="record_header_pos">0</TD><TD PORT="record_header_size">...</TD><TD>RecordHeader</TD><TD PORT="record_header_type">record_header</TD></TR>
				<TR><TD PORT="tag_body_pos">...</TD><TD PORT="tag_body_size">...</TD><TD>switch (record_header.tag_type)</TD><TD PORT="tag_body_type">tag_body</TD></TR>
			</TABLE>>];
tag__seq_tag_body_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
	<TR><TD>:tag_type_abc_tag</TD><TD PORT="case0">AbcTagBody</TD></TR>
</TABLE>>];
		}
		subgraph cluster__abc_tag_body {
			label="Swf::AbcTagBody";
			graph[style=dotted];

			abc_tag_body__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="flags_pos">0</TD><TD PORT="flags_size">4</TD><TD>u4le</TD><TD PORT="flags_type">flags</TD></TR>
				<TR><TD PORT="name_pos">4</TD><TD PORT="name_size">...</TD><TD>str(ASCII)</TD><TD PORT="name_type">name</TD></TR>
				<TR><TD PORT="abcdata_pos">...</TD><TD PORT="abcdata_size">⇲</TD><TD></TD><TD PORT="abcdata_type">abcdata</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__record_header {
			label="Swf::RecordHeader";
			graph[style=dotted];

			record_header__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="tag_code_and_length_pos">0</TD><TD PORT="tag_code_and_length_size">2</TD><TD>u2le</TD><TD PORT="tag_code_and_length_type">tag_code_and_length</TD></TR>
				<TR><TD PORT="big_len_pos">2</TD><TD PORT="big_len_size">4</TD><TD>s4le</TD><TD PORT="big_len_type">big_len</TD></TR>
			</TABLE>>];
			record_header__inst__tag_type [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>tag_type</TD><TD>Kaitai::Struct::Stream::resolve_enum(TAG_TYPE, (tag_code_and_length &gt;&gt; 6))</TD></TR>
			</TABLE>>];
			record_header__inst__small_len [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>small_len</TD><TD>(tag_code_and_length &amp; 63)</TD></TR>
			</TABLE>>];
			record_header__inst__len [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>len</TD><TD>(small_len == 63 ? big_len : small_len)</TD></TR>
			</TABLE>>];
		}
	}
	swf__seq:body_type -> swf_body__seq [style=bold];
	swf_body__seq:rect_type -> rect__seq [style=bold];
	swf_body__seq:tags_type -> tag__seq [style=bold];
	rect__inst__num_bytes:num_bytes_type -> rect__seq:skip_size [color="#404040"];
	rect__seq:b1_type -> rect__inst__num_bits [color="#404040"];
	rect__inst__num_bits:num_bits_type -> rect__inst__num_bytes [color="#404040"];
	tag__seq:record_header_type -> record_header__seq [style=bold];
	tag__seq:tag_body_type -> tag__seq_tag_body_switch [style=bold];
	tag__seq_tag_body_switch:case0 -> abc_tag_body__seq [style=bold];
	record_header__inst__tag_type:tag_type_type -> tag__seq:tag_body_type [color="#404040"];
	record_header__seq:tag_code_and_length_type -> record_header__inst__tag_type [color="#404040"];
	record_header__seq:tag_code_and_length_type -> record_header__inst__small_len [color="#404040"];
	record_header__inst__small_len:small_len_type -> record_header__inst__len [color="#404040"];
	record_header__seq:big_len_type -> record_header__inst__len [color="#404040"];
	record_header__inst__small_len:small_len_type -> record_header__inst__len [color="#404040"];
}
