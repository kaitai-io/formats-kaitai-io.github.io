digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__elf {
		label="Elf";
		graph[style=dotted];

		elf__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="magic_pos">0</TD><TD PORT="magic_size">4</TD><TD>7F 45 4C 46</TD><TD PORT="magic_type">magic</TD></TR>
			<TR><TD PORT="bits_pos">4</TD><TD PORT="bits_size">1</TD><TD>u1→Bits</TD><TD PORT="bits_type">bits</TD></TR>
			<TR><TD PORT="endian_pos">5</TD><TD PORT="endian_size">1</TD><TD>u1→Endian</TD><TD PORT="endian_type">endian</TD></TR>
			<TR><TD PORT="ei_version_pos">6</TD><TD PORT="ei_version_size">1</TD><TD>u1</TD><TD PORT="ei_version_type">ei_version</TD></TR>
			<TR><TD PORT="abi_pos">7</TD><TD PORT="abi_size">1</TD><TD>u1→OsAbi</TD><TD PORT="abi_type">abi</TD></TR>
			<TR><TD PORT="abi_version_pos">8</TD><TD PORT="abi_version_size">1</TD><TD>u1</TD><TD PORT="abi_version_type">abi_version</TD></TR>
			<TR><TD PORT="pad_pos">9</TD><TD PORT="pad_size">7</TD><TD></TD><TD PORT="pad_type">pad</TD></TR>
			<TR><TD PORT="header_pos">16</TD><TD PORT="header_size">...</TD><TD>EndianElf</TD><TD PORT="header_type">header</TD></TR>
		</TABLE>>];
		subgraph cluster__endian_elf {
			label="Elf::EndianElf";
			graph[style=dotted];

			endian_elf__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="e_type_pos">0</TD><TD PORT="e_type_size">2</TD><TD>u2→ObjType</TD><TD PORT="e_type_type">e_type</TD></TR>
				<TR><TD PORT="machine_pos">2</TD><TD PORT="machine_size">2</TD><TD>u2→Machine</TD><TD PORT="machine_type">machine</TD></TR>
				<TR><TD PORT="e_version_pos">4</TD><TD PORT="e_version_size">4</TD><TD>u4</TD><TD PORT="e_version_type">e_version</TD></TR>
				<TR><TD PORT="entry_point_pos">8</TD><TD PORT="entry_point_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="entry_point_type">entry_point</TD></TR>
				<TR><TD PORT="program_header_offset_pos">...</TD><TD PORT="program_header_offset_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="program_header_offset_type">program_header_offset</TD></TR>
				<TR><TD PORT="section_header_offset_pos">...</TD><TD PORT="section_header_offset_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="section_header_offset_type">section_header_offset</TD></TR>
				<TR><TD PORT="flags_pos">...</TD><TD PORT="flags_size">4</TD><TD></TD><TD PORT="flags_type">flags</TD></TR>
				<TR><TD PORT="e_ehsize_pos">...</TD><TD PORT="e_ehsize_size">2</TD><TD>u2</TD><TD PORT="e_ehsize_type">e_ehsize</TD></TR>
				<TR><TD PORT="program_header_entry_size_pos">...</TD><TD PORT="program_header_entry_size_size">2</TD><TD>u2</TD><TD PORT="program_header_entry_size_type">program_header_entry_size</TD></TR>
				<TR><TD PORT="qty_program_header_pos">...</TD><TD PORT="qty_program_header_size">2</TD><TD>u2</TD><TD PORT="qty_program_header_type">qty_program_header</TD></TR>
				<TR><TD PORT="section_header_entry_size_pos">...</TD><TD PORT="section_header_entry_size_size">2</TD><TD>u2</TD><TD PORT="section_header_entry_size_type">section_header_entry_size</TD></TR>
				<TR><TD PORT="qty_section_header_pos">...</TD><TD PORT="qty_section_header_size">2</TD><TD>u2</TD><TD PORT="qty_section_header_type">qty_section_header</TD></TR>
				<TR><TD PORT="section_names_idx_pos">...</TD><TD PORT="section_names_idx_size">2</TD><TD>u2</TD><TD PORT="section_names_idx_type">section_names_idx</TD></TR>
			</TABLE>>];
			endian_elf__inst__program_headers [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="program_headers_pos">program_header_offset</TD><TD PORT="program_headers_size">program_header_entry_size</TD><TD>ProgramHeader</TD><TD PORT="program_headers_type">program_headers</TD></TR>
				<TR><TD COLSPAN="4" PORT="program_headers__repeat">repeat qty_program_header times</TD></TR>
			</TABLE>>];
			endian_elf__inst__section_headers [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="section_headers_pos">section_header_offset</TD><TD PORT="section_headers_size">section_header_entry_size</TD><TD>SectionHeader</TD><TD PORT="section_headers_type">section_headers</TD></TR>
				<TR><TD COLSPAN="4" PORT="section_headers__repeat">repeat qty_section_header times</TD></TR>
			</TABLE>>];
			endian_elf__inst__strings [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="strings_pos">section_headers[section_names_idx].offset</TD><TD PORT="strings_size">section_headers[section_names_idx].size</TD><TD>StringsStruct</TD><TD PORT="strings_type">strings</TD></TR>
			</TABLE>>];
endian_elf__seq_entry_point_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
endian_elf__seq_program_header_offset_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
endian_elf__seq_section_header_offset_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
			subgraph cluster__program_header {
				label="Elf::EndianElf::ProgramHeader";
				graph[style=dotted];

				program_header__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
					<TR><TD PORT="type_pos">0</TD><TD PORT="type_size">4</TD><TD>u4→PhType</TD><TD PORT="type_type">type</TD></TR>
					<TR><TD PORT="flags64_pos">4</TD><TD PORT="flags64_size">4</TD><TD>u4</TD><TD PORT="flags64_type">flags64</TD></TR>
					<TR><TD PORT="offset_pos">8</TD><TD PORT="offset_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="offset_type">offset</TD></TR>
					<TR><TD PORT="vaddr_pos">...</TD><TD PORT="vaddr_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="vaddr_type">vaddr</TD></TR>
					<TR><TD PORT="paddr_pos">...</TD><TD PORT="paddr_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="paddr_type">paddr</TD></TR>
					<TR><TD PORT="filesz_pos">...</TD><TD PORT="filesz_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="filesz_type">filesz</TD></TR>
					<TR><TD PORT="memsz_pos">...</TD><TD PORT="memsz_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="memsz_type">memsz</TD></TR>
					<TR><TD PORT="flags32_pos">...</TD><TD PORT="flags32_size">4</TD><TD>u4</TD><TD PORT="flags32_type">flags32</TD></TR>
					<TR><TD PORT="align_pos">...</TD><TD PORT="align_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="align_type">align</TD></TR>
				</TABLE>>];
program_header__seq_offset_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
program_header__seq_vaddr_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
program_header__seq_paddr_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
program_header__seq_filesz_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
program_header__seq_memsz_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
program_header__seq_align_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
			}
			subgraph cluster__section_header {
				label="Elf::EndianElf::SectionHeader";
				graph[style=dotted];

				section_header__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
					<TR><TD PORT="name_offset_pos">0</TD><TD PORT="name_offset_size">4</TD><TD>u4</TD><TD PORT="name_offset_type">name_offset</TD></TR>
					<TR><TD PORT="type_pos">4</TD><TD PORT="type_size">4</TD><TD>u4→ShType</TD><TD PORT="type_type">type</TD></TR>
					<TR><TD PORT="flags_pos">8</TD><TD PORT="flags_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="flags_type">flags</TD></TR>
					<TR><TD PORT="addr_pos">...</TD><TD PORT="addr_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="addr_type">addr</TD></TR>
					<TR><TD PORT="offset_pos">...</TD><TD PORT="offset_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="offset_type">offset</TD></TR>
					<TR><TD PORT="size_pos">...</TD><TD PORT="size_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="size_type">size</TD></TR>
					<TR><TD PORT="linked_section_idx_pos">...</TD><TD PORT="linked_section_idx_size">4</TD><TD>u4</TD><TD PORT="linked_section_idx_type">linked_section_idx</TD></TR>
					<TR><TD PORT="info_pos">...</TD><TD PORT="info_size">4</TD><TD></TD><TD PORT="info_type">info</TD></TR>
					<TR><TD PORT="align_pos">...</TD><TD PORT="align_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="align_type">align</TD></TR>
					<TR><TD PORT="entry_size_pos">...</TD><TD PORT="entry_size_size">...</TD><TD>switch (_root.bits)</TD><TD PORT="entry_size_type">entry_size</TD></TR>
				</TABLE>>];
				section_header__inst__body [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
					<TR><TD PORT="body_pos">offset</TD><TD PORT="body_size">size</TD><TD></TD><TD PORT="body_type">body</TD></TR>
				</TABLE>>];
				section_header__inst__name [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
					<TR><TD PORT="name_pos">name_offset</TD><TD PORT="name_size">...</TD><TD>str(ASCII)</TD><TD PORT="name_type">name</TD></TR>
				</TABLE>>];
section_header__seq_flags_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
section_header__seq_addr_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
section_header__seq_offset_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
section_header__seq_size_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
section_header__seq_align_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
section_header__seq_entry_size_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
			}
			subgraph cluster__strings_struct {
				label="Elf::EndianElf::StringsStruct";
				graph[style=dotted];

				strings_struct__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
					<TR><TD PORT="entries_pos">0</TD><TD PORT="entries_size">...</TD><TD>str(ASCII)</TD><TD PORT="entries_type">entries</TD></TR>
					<TR><TD COLSPAN="4" PORT="entries__repeat">repeat to end of stream</TD></TR>
				</TABLE>>];
			}
		}
	}
	elf__seq:header_type -> endian_elf__seq [style=bold];
	endian_elf__seq:entry_point_type -> endian_elf__seq_entry_point_switch [style=bold];
	elf__seq:bits_type -> endian_elf__seq:entry_point_type [color="#404040"];
	endian_elf__seq:program_header_offset_type -> endian_elf__seq_program_header_offset_switch [style=bold];
	elf__seq:bits_type -> endian_elf__seq:program_header_offset_type [color="#404040"];
	endian_elf__seq:section_header_offset_type -> endian_elf__seq_section_header_offset_switch [style=bold];
	elf__seq:bits_type -> endian_elf__seq:section_header_offset_type [color="#404040"];
	endian_elf__seq:program_header_offset_type -> endian_elf__inst__program_headers:program_headers_pos [color="#404040"];
	endian_elf__seq:program_header_entry_size_type -> endian_elf__inst__program_headers:program_headers_size [color="#404040"];
	endian_elf__inst__program_headers:program_headers_type -> program_header__seq [style=bold];
	endian_elf__seq:qty_program_header_type -> endian_elf__inst__program_headers:program_headers__repeat [color="#404040"];
	endian_elf__seq:section_header_offset_type -> endian_elf__inst__section_headers:section_headers_pos [color="#404040"];
	endian_elf__seq:section_header_entry_size_type -> endian_elf__inst__section_headers:section_headers_size [color="#404040"];
	endian_elf__inst__section_headers:section_headers_type -> section_header__seq [style=bold];
	endian_elf__seq:qty_section_header_type -> endian_elf__inst__section_headers:section_headers__repeat [color="#404040"];
	section_header__seq:offset_type -> endian_elf__inst__strings:strings_pos [color="#404040"];
	section_header__seq:size_type -> endian_elf__inst__strings:strings_size [color="#404040"];
	endian_elf__inst__strings:strings_type -> strings_struct__seq [style=bold];
	program_header__seq:offset_type -> program_header__seq_offset_switch [style=bold];
	elf__seq:bits_type -> program_header__seq:offset_type [color="#404040"];
	program_header__seq:vaddr_type -> program_header__seq_vaddr_switch [style=bold];
	elf__seq:bits_type -> program_header__seq:vaddr_type [color="#404040"];
	program_header__seq:paddr_type -> program_header__seq_paddr_switch [style=bold];
	elf__seq:bits_type -> program_header__seq:paddr_type [color="#404040"];
	program_header__seq:filesz_type -> program_header__seq_filesz_switch [style=bold];
	elf__seq:bits_type -> program_header__seq:filesz_type [color="#404040"];
	program_header__seq:memsz_type -> program_header__seq_memsz_switch [style=bold];
	elf__seq:bits_type -> program_header__seq:memsz_type [color="#404040"];
	program_header__seq:align_type -> program_header__seq_align_switch [style=bold];
	elf__seq:bits_type -> program_header__seq:align_type [color="#404040"];
	section_header__seq:flags_type -> section_header__seq_flags_switch [style=bold];
	elf__seq:bits_type -> section_header__seq:flags_type [color="#404040"];
	section_header__seq:addr_type -> section_header__seq_addr_switch [style=bold];
	elf__seq:bits_type -> section_header__seq:addr_type [color="#404040"];
	section_header__seq:offset_type -> section_header__seq_offset_switch [style=bold];
	elf__seq:bits_type -> section_header__seq:offset_type [color="#404040"];
	section_header__seq:size_type -> section_header__seq_size_switch [style=bold];
	elf__seq:bits_type -> section_header__seq:size_type [color="#404040"];
	section_header__seq:align_type -> section_header__seq_align_switch [style=bold];
	elf__seq:bits_type -> section_header__seq:align_type [color="#404040"];
	section_header__seq:entry_size_type -> section_header__seq_entry_size_switch [style=bold];
	elf__seq:bits_type -> section_header__seq:entry_size_type [color="#404040"];
	section_header__seq:offset_type -> section_header__inst__body:body_pos [color="#404040"];
	section_header__seq:size_type -> section_header__inst__body:body_size [color="#404040"];
	section_header__seq:name_offset_type -> section_header__inst__name:name_pos [color="#404040"];
}
